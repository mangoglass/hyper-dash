{"version":3,"file":"internalTexture.js","sourceRoot":"","sources":["../../../../sourceES6/core/Materials/Textures/internalTexture.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport { Nullable, int } from \"../../types\";\r\nimport { RenderTargetCreationOptions } from \"../../Materials/Textures/renderTargetCreationOptions\";\r\n\r\nimport { ICanvas, ICanvasRenderingContext } from \"../../Engines/ICanvas\";\r\nimport { _DevTools } from '../../Misc/devTools';\r\nimport { Engine } from '../../Engines/engine';\r\nimport { HardwareTextureWrapper } from \"./hardwareTextureWrapper\";\r\n\r\ndeclare type ThinEngine = import(\"../../Engines/thinEngine\").ThinEngine;\r\ndeclare type BaseTexture = import(\"../../Materials/Textures/baseTexture\").BaseTexture;\r\ndeclare type SphericalPolynomial = import(\"../../Maths/sphericalPolynomial\").SphericalPolynomial;\r\n\r\n/**\r\n * Defines the source of the internal texture\r\n */\r\nexport enum InternalTextureSource {\r\n    /**\r\n     * The source of the texture data is unknown\r\n     */\r\n    Unknown,\r\n    /**\r\n    * Texture data comes from an URL\r\n    */\r\n    Url,\r\n    /**\r\n     * Texture data is only used for temporary storage\r\n     */\r\n    Temp,\r\n    /**\r\n     * Texture data comes from raw data (ArrayBuffer)\r\n     */\r\n    Raw,\r\n    /**\r\n     * Texture content is dynamic (video or dynamic texture)\r\n     */\r\n    Dynamic,\r\n    /**\r\n     * Texture content is generated by rendering to it\r\n     */\r\n    RenderTarget,\r\n    /**\r\n     * Texture content is part of a multi render target process\r\n     */\r\n    MultiRenderTarget,\r\n    /**\r\n     * Texture data comes from a cube data file\r\n     */\r\n    Cube,\r\n    /**\r\n     * Texture data comes from a raw cube data\r\n     */\r\n    CubeRaw,\r\n    /**\r\n     * Texture data come from a prefiltered cube data file\r\n     */\r\n    CubePrefiltered,\r\n    /**\r\n     * Texture content is raw 3D data\r\n     */\r\n    Raw3D,\r\n    /**\r\n     * Texture content is raw 2D array data\r\n     */\r\n    Raw2DArray,\r\n    /**\r\n     * Texture content is a depth texture\r\n     */\r\n    Depth,\r\n    /**\r\n     * Texture data comes from a raw cube data encoded with RGBD\r\n     */\r\n    CubeRawRGBD\r\n}\r\n\r\n/**\r\n * Class used to store data associated with WebGL texture data for the engine\r\n * This class should not be used directly\r\n */\r\nexport class InternalTexture {\r\n\r\n    /** @hidden */\r\n    public static _UpdateRGBDAsync = (internalTexture: InternalTexture, data: ArrayBufferView[][], sphericalPolynomial: Nullable<SphericalPolynomial>, lodScale: number, lodOffset: number): Promise<void> => {\r\n        throw _DevTools.WarnImport(\"environmentTextureTools\");\r\n    }\r\n\r\n    /**\r\n     * Defines if the texture is ready\r\n     */\r\n    public isReady: boolean = false;\r\n    /**\r\n     * Defines if the texture is a cube texture\r\n     */\r\n    public isCube: boolean = false;\r\n    /**\r\n     * Defines if the texture contains 3D data\r\n     */\r\n    public is3D: boolean = false;\r\n    /**\r\n     * Defines if the texture contains 2D array data\r\n     */\r\n    public is2DArray: boolean = false;\r\n    /**\r\n     * Defines if the texture contains multiview data\r\n     */\r\n    public isMultiview: boolean = false;\r\n    /**\r\n     * Gets the URL used to load this texture\r\n     */\r\n    public url: string = \"\";\r\n    /** @hidden */\r\n    public _originalUrl: string; // not empty only if different from url\r\n    /**\r\n     * Gets the sampling mode of the texture\r\n     */\r\n    public samplingMode: number = -1;\r\n    /**\r\n     * Gets a boolean indicating if the texture needs mipmaps generation\r\n     */\r\n    public generateMipMaps: boolean = false;\r\n    /**\r\n     * Gets the number of samples used by the texture (WebGL2+ only)\r\n     */\r\n    public samples: number = 0;\r\n    /**\r\n     * Gets the type of the texture (int, float...)\r\n     */\r\n    public type: number = -1;\r\n    /**\r\n     * Gets the format of the texture (RGB, RGBA...)\r\n     */\r\n    public format: number = -1;\r\n    /**\r\n     * Observable called when the texture is loaded\r\n     */\r\n    public onLoadedObservable = new Observable<InternalTexture>();\r\n    /**\r\n     * Gets the width of the texture\r\n     */\r\n    public width: number = 0;\r\n    /**\r\n     * Gets the height of the texture\r\n     */\r\n    public height: number = 0;\r\n    /**\r\n     * Gets the depth of the texture\r\n     */\r\n    public depth: number = 0;\r\n    /**\r\n     * Gets the initial width of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseWidth: number = 0;\r\n    /**\r\n     * Gets the initial height of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseHeight: number = 0;\r\n    /**\r\n     * Gets the initial depth of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseDepth: number = 0;\r\n    /**\r\n     * Gets a boolean indicating if the texture is inverted on Y axis\r\n     */\r\n    public invertY: boolean = false;\r\n\r\n    // Private\r\n    /** @hidden */\r\n    public _invertVScale = false;\r\n    /** @hidden */\r\n    public _associatedChannel = -1;\r\n    /** @hidden */\r\n    public _source = InternalTextureSource.Unknown;\r\n    /** @hidden */\r\n    public _buffer: Nullable<string | ArrayBuffer | ArrayBufferView | HTMLImageElement | Blob | ImageBitmap> = null;\r\n    /** @hidden */\r\n    public _bufferView: Nullable<ArrayBufferView> = null;\r\n    /** @hidden */\r\n    public _bufferViewArray: Nullable<ArrayBufferView[]> = null;\r\n    /** @hidden */\r\n    public _bufferViewArrayArray: Nullable<ArrayBufferView[][]> = null;\r\n    /** @hidden */\r\n    public _size: number = 0;\r\n    /** @hidden */\r\n    public _extension: string = \"\";\r\n    /** @hidden */\r\n    public _files: Nullable<string[]> = null;\r\n    /** @hidden */\r\n    public _workingCanvas: Nullable<ICanvas> = null;\r\n    /** @hidden */\r\n    public _workingContext: Nullable<ICanvasRenderingContext> = null;\r\n    /** @hidden */\r\n    public _framebuffer: Nullable<WebGLFramebuffer> = null;\r\n    /** @hidden */\r\n    public _depthStencilBuffer: Nullable<WebGLRenderbuffer> = null;\r\n    /** @hidden */\r\n    public _MSAAFramebuffer: Nullable<WebGLFramebuffer> = null;\r\n    /** @hidden */\r\n    public _MSAARenderBuffer: Nullable<WebGLRenderbuffer> = null;\r\n    /** @hidden */\r\n    public _attachments: Nullable<number[]> = null;\r\n    /** @hidden */\r\n    public _textureArray: Nullable<InternalTexture[]> = null;\r\n    /** @hidden */\r\n    public _cachedCoordinatesMode: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _cachedWrapU: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _cachedWrapV: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _cachedWrapR: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _cachedAnisotropicFilteringLevel: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _isDisabled: boolean = false;\r\n    /** @hidden */\r\n    public _compression: Nullable<string> = null;\r\n    /** @hidden */\r\n    public _generateStencilBuffer: boolean = false;\r\n    /** @hidden */\r\n    public _generateDepthBuffer: boolean = false;\r\n    /** @hidden */\r\n    public _comparisonFunction: number = 0;\r\n    /** @hidden */\r\n    public _sphericalPolynomial: Nullable<SphericalPolynomial> = null;\r\n    /** @hidden */\r\n    public _sphericalPolynomialPromise: Nullable<Promise<SphericalPolynomial>> = null;\r\n    /** @hidden */\r\n    public _sphericalPolynomialComputed = false;\r\n    /** @hidden */\r\n    public _lodGenerationScale: number = 0;\r\n    /** @hidden */\r\n    public _lodGenerationOffset: number = 0;\r\n    /** @hidden */\r\n    public _depthStencilTexture: Nullable<InternalTexture>;\r\n    /** @hidden */\r\n    public _useSRGBBuffer: boolean = false;\r\n\r\n    // Multiview\r\n    /** @hidden */\r\n    public _colorTextureArray: Nullable<WebGLTexture> = null;\r\n    /** @hidden */\r\n    public _depthStencilTextureArray: Nullable<WebGLTexture> = null;\r\n\r\n    // The following three fields helps sharing generated fixed LODs for texture filtering\r\n    // In environment not supporting the textureLOD extension like EDGE. They are for internal use only.\r\n    // They are at the level of the gl texture to benefit from the cache.\r\n    /** @hidden */\r\n    public _lodTextureHigh: Nullable<BaseTexture> = null;\r\n    /** @hidden */\r\n    public _lodTextureMid: Nullable<BaseTexture> = null;\r\n    /** @hidden */\r\n    public _lodTextureLow: Nullable<BaseTexture> = null;\r\n    /** @hidden */\r\n    public _isRGBD: boolean = false;\r\n\r\n    /** @hidden */\r\n    public _linearSpecularLOD: boolean = false;\r\n    /** @hidden */\r\n    public _irradianceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @hidden */\r\n    public _hardwareTexture: Nullable<HardwareTextureWrapper> = null;\r\n\r\n    /** @hidden */\r\n    public _references: number = 1;\r\n\r\n    /** @hidden */\r\n    public _gammaSpace: Nullable<boolean> = null;\r\n\r\n    private _engine: ThinEngine;\r\n    private _uniqueId: number;\r\n\r\n    private static _Counter = 0;\r\n\r\n    /** Gets the unique id of the internal texture */\r\n    public get uniqueId() {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Gets the Engine the texture belongs to.\r\n     * @returns The babylon engine\r\n     */\r\n    public getEngine(): ThinEngine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * Gets the data source type of the texture\r\n     */\r\n    public get source(): InternalTextureSource {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InternalTexture\r\n     * @param engine defines the engine to use\r\n     * @param source defines the type of data that will be used\r\n     * @param delayAllocation if the texture allocation should be delayed (default: false)\r\n     */\r\n    constructor(engine: ThinEngine, source: InternalTextureSource, delayAllocation = false) {\r\n        this._engine = engine;\r\n        this._source = source;\r\n        this._uniqueId = InternalTexture._Counter++;\r\n\r\n        if (!delayAllocation) {\r\n            this._hardwareTexture = engine._createHardwareTexture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increments the number of references (ie. the number of Texture that point to it)\r\n     */\r\n    public incrementReferences(): void {\r\n        this._references++;\r\n    }\r\n\r\n    /**\r\n     * Change the size of the texture (not the size of the content)\r\n     * @param width defines the new width\r\n     * @param height defines the new height\r\n     * @param depth defines the new depth (1 by default)\r\n     */\r\n    public updateSize(width: int, height: int, depth: int = 1): void {\r\n        this._engine.updateTextureDimensions(this, width, height, depth);\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n        this.depth = depth;\r\n\r\n        this.baseWidth = width;\r\n        this.baseHeight = height;\r\n        this.baseDepth = depth;\r\n\r\n        this._size = width * height * depth;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        var proxy: InternalTexture;\r\n        this.isReady = false;\r\n        this._cachedCoordinatesMode = null;\r\n        this._cachedWrapU = null;\r\n        this._cachedWrapV = null;\r\n        this._cachedWrapR = null;\r\n        this._cachedAnisotropicFilteringLevel = null;\r\n\r\n        const rebuildSamples = () => {\r\n            const samples = this.samples;\r\n\r\n            if (samples > 1) {\r\n                this.samples = 1; // make sure we don't return early inside updateRenderTargetTextureSampleCount\r\n                this._MSAAFramebuffer = null; // make sure updateRenderTargetTextureSampleCount won't try to delete this object (which is invalid because of the context lost)\r\n                this._MSAARenderBuffer = null; // same than above\r\n                (this._engine as Engine).updateRenderTargetTextureSampleCount(this, samples);\r\n            }\r\n        };\r\n\r\n        switch (this.source) {\r\n            case InternalTextureSource.Temp:\r\n                break;\r\n\r\n            case InternalTextureSource.Url:\r\n                proxy = this._engine.createTexture(this._originalUrl ?? this.url, !this.generateMipMaps, this.invertY, null, this.samplingMode, () => {\r\n                    proxy._swapAndDie(this, false);\r\n                    rebuildSamples();\r\n                    this.isReady = true;\r\n                }, null, this._buffer, undefined, this.format, undefined, undefined, undefined, undefined, this._useSRGBBuffer);\r\n                return;\r\n\r\n            case InternalTextureSource.Raw:\r\n                proxy = this._engine.createRawTexture(this._bufferView, this.baseWidth, this.baseHeight, this.format, this.generateMipMaps,\r\n                    this.invertY, this.samplingMode, this._compression, this.type);\r\n                proxy._swapAndDie(this, false);\r\n\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.Raw3D:\r\n                proxy = this._engine.createRawTexture3D(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps,\r\n                    this.invertY, this.samplingMode, this._compression, this.type);\r\n                proxy._swapAndDie(this, false);\r\n\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.Raw2DArray:\r\n                proxy = this._engine.createRawTexture2DArray(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps,\r\n                    this.invertY, this.samplingMode, this._compression, this.type);\r\n                proxy._swapAndDie(this, false);\r\n\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.Dynamic:\r\n                proxy = this._engine.createDynamicTexture(this.baseWidth, this.baseHeight, this.generateMipMaps, this.samplingMode);\r\n                proxy._swapAndDie(this, false);\r\n                this._engine.updateDynamicTexture(this, this._engine.getRenderingCanvas()!, this.invertY, undefined, undefined, true);\r\n\r\n                // The engine will make sure to update content so no need to flag it as isReady = true\r\n                break;\r\n\r\n            case InternalTextureSource.RenderTarget:\r\n                let options = new RenderTargetCreationOptions();\r\n                options.generateDepthBuffer = this._generateDepthBuffer;\r\n                options.generateMipMaps = this.generateMipMaps;\r\n                options.generateStencilBuffer = this._generateStencilBuffer;\r\n                options.samplingMode = this.samplingMode;\r\n                options.type = this.type;\r\n\r\n                if (this.isCube) {\r\n                    proxy = this._engine.createRenderTargetCubeTexture(this.width, options);\r\n                } else {\r\n                    let size = {\r\n                        width: this.width,\r\n                        height: this.height,\r\n                        layers: this.is2DArray ? this.depth : undefined\r\n                    };\r\n\r\n                    proxy = (this._engine as Engine).createRenderTargetTexture(size, options);\r\n                }\r\n                proxy._swapAndDie(this, false);\r\n\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.MultiRenderTarget:\r\n                if (this._textureArray && this === this._textureArray[0]) {\r\n                    let generateDepthTexture = false;\r\n                    let textureCount = this._textureArray.length;\r\n\r\n                    if (this._textureArray[this._textureArray.length - 1]._textureArray === null) {\r\n                        generateDepthTexture = true;\r\n                        textureCount--;\r\n                    }\r\n\r\n                    const samplingModes: number[] = [];\r\n                    const types: number[] = [];\r\n\r\n                    for (let i = 0; i < textureCount; ++i) {\r\n                        const texture = this._textureArray[i];\r\n\r\n                        samplingModes.push(texture.samplingMode);\r\n                        types.push(texture.type);\r\n                    }\r\n\r\n                    const optionsMRT = {\r\n                        samplingModes,\r\n                        generateMipMaps: this.generateMipMaps,\r\n                        generateDepthBuffer: this._generateDepthBuffer,\r\n                        generateStencilBuffer: this._generateStencilBuffer,\r\n                        generateDepthTexture,\r\n                        types,\r\n                        textureCount,\r\n                    };\r\n                    const size = {\r\n                        width: this.width,\r\n                        height: this.height,\r\n                    };\r\n                    const textures = (this._engine as Engine).createMultipleRenderTarget(size, optionsMRT);\r\n                    for (let i = 0; i < this._textureArray.length; ++i) {\r\n                        textures[i]._swapAndDie(this._textureArray[i], false);\r\n                    }\r\n\r\n                }\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.Depth:\r\n                let depthTextureOptions = {\r\n                    bilinearFiltering: (this.samplingMode === 2) || (this.samplingMode === 3) || (this.samplingMode === 11),\r\n                    comparisonFunction: this._comparisonFunction,\r\n                    generateStencil: this._generateStencilBuffer,\r\n                    isCube: this.isCube,\r\n                    samples: this.samples\r\n                };\r\n\r\n                let size = {\r\n                    width: this.width,\r\n                    height: this.height,\r\n                    layers: this.is2DArray ? this.depth : undefined\r\n                };\r\n                proxy = this._engine.createDepthStencilTexture(size, depthTextureOptions);\r\n                proxy._swapAndDie(this, false);\r\n\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.Cube:\r\n                proxy = this._engine.createCubeTexture(this.url, null, this._files, !this.generateMipMaps, () => {\r\n                    proxy._swapAndDie(this, false);\r\n                    rebuildSamples();\r\n                    this.isReady = true;\r\n                }, null, this.format, this._extension, false, 0, 0, null, undefined, this._useSRGBBuffer);\r\n                return;\r\n\r\n            case InternalTextureSource.CubeRaw:\r\n                proxy = this._engine.createRawCubeTexture(this._bufferViewArray!, this.width, this.format, this.type, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\r\n                proxy._swapAndDie(this, false);\r\n                this.isReady = true;\r\n                break;\r\n\r\n            case InternalTextureSource.CubeRawRGBD:\r\n                proxy = this._engine.createRawCubeTexture(null, this.width, this.format, this.type, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\r\n                InternalTexture._UpdateRGBDAsync(proxy, this._bufferViewArrayArray!, this._sphericalPolynomial, this._lodGenerationScale, this._lodGenerationOffset).then(() => {\r\n                    proxy._swapAndDie(this, false);\r\n                    rebuildSamples();\r\n                    this.isReady = true;\r\n                });\r\n                return;\r\n\r\n            case InternalTextureSource.CubePrefiltered:\r\n                proxy = this._engine.createPrefilteredCubeTexture(this.url, null, this._lodGenerationScale, this._lodGenerationOffset, (proxy) => {\r\n                    if (proxy) {\r\n                        proxy._swapAndDie(this, false);\r\n                    }\r\n\r\n                    rebuildSamples();\r\n                    this.isReady = true;\r\n                }, null, this.format, this._extension);\r\n                proxy._sphericalPolynomial = this._sphericalPolynomial;\r\n                return;\r\n\r\n            case InternalTextureSource.Unknown:\r\n                if (this._colorTextureArray && this._depthStencilTextureArray && this.isMultiview) {\r\n                    proxy = (this._engine as Engine).createMultiviewRenderTargetTexture(this.width, this.height);\r\n                    proxy._swapAndDie(this, false);\r\n\r\n                    this.isReady = true;\r\n                 } else if (this.isCube) {\r\n                    let depthTextureOptions = {\r\n                        bilinearFiltering: this.samplingMode !== 2,\r\n                        comparisonFunction: this._comparisonFunction,\r\n                        generateStencil: this._generateStencilBuffer,\r\n                        isCube: this.isCube,\r\n                        samples: this.samples\r\n                    };\r\n                    proxy = (this._engine as Engine)._createDepthStencilCubeTexture(this.width, depthTextureOptions);\r\n                    proxy._swapAndDie(this, false);\r\n\r\n                    this.isReady = true;\r\n                 }\r\n                 break;\r\n        }\r\n\r\n        rebuildSamples();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _swapAndDie(target: InternalTexture, swapAll = true): void {\r\n        // TODO what about refcount on target?\r\n\r\n        this._hardwareTexture?.setUsage(target._source, this.generateMipMaps, this.isCube, this.width, this.height);\r\n\r\n        target._hardwareTexture = this._hardwareTexture;\r\n        if (swapAll) {\r\n            target._isRGBD = this._isRGBD;\r\n        }\r\n\r\n        if (this._framebuffer) {\r\n            target._framebuffer = this._framebuffer;\r\n        }\r\n\r\n        if (this._depthStencilBuffer) {\r\n            target._depthStencilBuffer = this._depthStencilBuffer;\r\n        }\r\n\r\n        if (swapAll) {\r\n            target._depthStencilTexture = this._depthStencilTexture;\r\n        }\r\n\r\n        if (this._lodTextureHigh) {\r\n            if (target._lodTextureHigh) {\r\n                target._lodTextureHigh.dispose();\r\n            }\r\n            target._lodTextureHigh = this._lodTextureHigh;\r\n        }\r\n\r\n        if (this._lodTextureMid) {\r\n            if (target._lodTextureMid) {\r\n                target._lodTextureMid.dispose();\r\n            }\r\n            target._lodTextureMid = this._lodTextureMid;\r\n        }\r\n\r\n        if (this._lodTextureLow) {\r\n            if (target._lodTextureLow) {\r\n                target._lodTextureLow.dispose();\r\n            }\r\n            target._lodTextureLow = this._lodTextureLow;\r\n        }\r\n\r\n        if (this._irradianceTexture) {\r\n            if (target._irradianceTexture) {\r\n                target._irradianceTexture.dispose();\r\n            }\r\n            target._irradianceTexture = this._irradianceTexture;\r\n        }\r\n\r\n        let cache = this._engine.getLoadedTexturesCache();\r\n        var index = cache.indexOf(this);\r\n        if (index !== -1) {\r\n            cache.splice(index, 1);\r\n        }\r\n\r\n        var index = cache.indexOf(target);\r\n        if (index === -1) {\r\n            cache.push(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the current allocated resources\r\n     */\r\n    public dispose(): void {\r\n        this._references--;\r\n        if (this._references === 0) {\r\n            this._engine._releaseTexture(this);\r\n            this._hardwareTexture = null;\r\n        }\r\n    }\r\n}\r\n"]}