{"version":3,"file":"webgpuCacheSampler.js","sourceRoot":"","sources":["../../../../sourceES6/core/Engines/WebGPU/webgpuCacheSampler.ts"],"names":[],"mappings":"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","sourcesContent":["import * as WebGPUConstants from './webgpuConstants';\r\n\r\nimport { InternalTexture } from '../../Materials/Textures/internalTexture';\r\nimport { WebGPUTextureHelper } from \"./webgpuTextureHelper\";\r\n\r\nconst filterToBits = [\r\n    0 | 0 << 1 | 0 << 2, // not used\r\n    0 | 0 << 1 | 0 << 2, // TEXTURE_NEAREST_SAMPLINGMODE / TEXTURE_NEAREST_NEAREST\r\n    1 | 1 << 1 | 0 << 2, // TEXTURE_BILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR\r\n    1 | 1 << 1 | 1 << 2, // TEXTURE_TRILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR_MIPLINEAR\r\n    0 | 0 << 1 | 0 << 2, // TEXTURE_NEAREST_NEAREST_MIPNEAREST\r\n    0 | 1 << 1 | 0 << 2, // TEXTURE_NEAREST_LINEAR_MIPNEAREST\r\n    0 | 1 << 1 | 1 << 2, // TEXTURE_NEAREST_LINEAR_MIPLINEAR\r\n    0 | 1 << 1 | 0 << 2, // TEXTURE_NEAREST_LINEAR\r\n    0 | 0 << 1 | 1 << 2, // TEXTURE_NEAREST_NEAREST_MIPLINEAR\r\n    1 | 0 << 1 | 0 << 2, // TEXTURE_LINEAR_NEAREST_MIPNEAREST\r\n    1 | 0 << 1 | 1 << 2, // TEXTURE_LINEAR_NEAREST_MIPLINEAR\r\n    1 | 1 << 1 | 0 << 2, // TEXTURE_LINEAR_LINEAR_MIPNEAREST\r\n    1 | 0 << 1 | 0 << 2, // TEXTURE_LINEAR_NEAREST\r\n];\r\n\r\n// subtract 0x01FF from the comparison function value before indexing this array!\r\nconst comparisonFunctionToBits = [\r\n    0 << 3 | 0 << 4 | 0 << 5 | 0 << 6, // undefined\r\n    0 << 3 | 0 << 4 | 0 << 5 | 1 << 6, // NEVER\r\n    0 << 3 | 0 << 4 | 1 << 5 | 0 << 6, // LESS\r\n    0 << 3 | 0 << 4 | 1 << 5 | 1 << 6, // EQUAL\r\n    0 << 3 | 1 << 4 | 0 << 5 | 0 << 6, // LEQUAL\r\n    0 << 3 | 1 << 4 | 0 << 5 | 1 << 6, // GREATER\r\n    0 << 3 | 1 << 4 | 1 << 5 | 0 << 6, // NOTEQUAL\r\n    0 << 3 | 1 << 4 | 1 << 5 | 1 << 6, // GEQUAL\r\n    1 << 3 | 0 << 4 | 0 << 5 | 0 << 6, // ALWAYS\r\n];\r\n\r\nconst filterNoMipToBits = [\r\n    0 << 7, // not used\r\n    1 << 7, // TEXTURE_NEAREST_SAMPLINGMODE / TEXTURE_NEAREST_NEAREST\r\n    1 << 7, // TEXTURE_BILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR\r\n    0 << 7, // TEXTURE_TRILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR_MIPLINEAR\r\n    0 << 7, // TEXTURE_NEAREST_NEAREST_MIPNEAREST\r\n    0 << 7, // TEXTURE_NEAREST_LINEAR_MIPNEAREST\r\n    0 << 7, // TEXTURE_NEAREST_LINEAR_MIPLINEAR\r\n    1 << 7, // TEXTURE_NEAREST_LINEAR\r\n    0 << 7, // TEXTURE_NEAREST_NEAREST_MIPLINEAR\r\n    0 << 7, // TEXTURE_LINEAR_NEAREST_MIPNEAREST\r\n    0 << 7, // TEXTURE_LINEAR_NEAREST_MIPLINEAR\r\n    0 << 7, // TEXTURE_LINEAR_LINEAR_MIPNEAREST\r\n    1 << 7, // TEXTURE_LINEAR_NEAREST\r\n];\r\n\r\n/** @hidden */\r\nexport class WebGPUCacheSampler {\r\n\r\n    private _samplers: { [hash: number]: GPUSampler } = {};\r\n    private _device: GPUDevice;\r\n\r\n    public disabled: boolean;\r\n\r\n    constructor(device: GPUDevice) {\r\n        this._device = device;\r\n        this.disabled = false;\r\n    }\r\n\r\n    private static _GetSamplerHashCode(texture: InternalTexture): number {\r\n        let code =\r\n            filterToBits[texture.samplingMode] +\r\n            comparisonFunctionToBits[(texture._comparisonFunction || 0x0202) - 0x0200 + 1] +\r\n            filterNoMipToBits[texture.samplingMode] + // handle the lodMinClamp = lodMaxClamp = 0 case when no filter used for mip mapping\r\n            ((texture._cachedWrapU ?? 1) << 8) +\r\n            ((texture._cachedWrapV ?? 1) << 10) +\r\n            ((texture._cachedWrapR ?? 1) << 12) +\r\n            ((texture.generateMipMaps ? 1 : 0) << 14) + // need to factor this in because _getSamplerFilterDescriptor depends on samplingMode AND generateMipMaps!\r\n            ((texture._cachedAnisotropicFilteringLevel ?? 1) << 15);\r\n\r\n        return code;\r\n    }\r\n\r\n    private static _GetSamplerFilterDescriptor(internalTexture: InternalTexture, anisotropy: number): {\r\n        magFilter: GPUFilterMode,\r\n        minFilter: GPUFilterMode,\r\n        mipmapFilter: GPUFilterMode,\r\n        lodMinClamp?: number,\r\n        lodMaxClamp?: number,\r\n        anisotropyEnabled?: boolean,\r\n    } {\r\n        let magFilter: GPUFilterMode, minFilter: GPUFilterMode, mipmapFilter: GPUFilterMode, lodMinClamp: number | undefined, lodMaxClamp: number | undefined;\r\n        const useMipMaps = internalTexture.generateMipMaps;\r\n        switch (internalTexture.samplingMode) {\r\n            case 11:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case 3:\r\n            case 3:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case 8:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case 4:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case 5:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case 6:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case 7:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            case 1:\r\n            case 1:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            case 9:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case 10:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case 2:\r\n            case 2:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            case 12:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            default:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n        }\r\n\r\n        if (anisotropy > 1 && (lodMinClamp !== 0 || lodMaxClamp !== 0)) {\r\n            return {\r\n                magFilter: WebGPUConstants.FilterMode.Linear,\r\n                minFilter: WebGPUConstants.FilterMode.Linear,\r\n                mipmapFilter: WebGPUConstants.FilterMode.Linear,\r\n                anisotropyEnabled: true,\r\n            };\r\n        }\r\n\r\n        return {\r\n            magFilter,\r\n            minFilter,\r\n            mipmapFilter,\r\n            lodMinClamp,\r\n            lodMaxClamp,\r\n        };\r\n    }\r\n\r\n    private static _GetWrappingMode(mode: number): GPUAddressMode {\r\n        switch (mode) {\r\n            case 1:\r\n                return WebGPUConstants.AddressMode.Repeat;\r\n            case 0:\r\n                return WebGPUConstants.AddressMode.ClampToEdge;\r\n            case 2:\r\n                return WebGPUConstants.AddressMode.MirrorRepeat;\r\n        }\r\n        return WebGPUConstants.AddressMode.Repeat;\r\n    }\r\n\r\n    private static _GetSamplerWrappingDescriptor(internalTexture: InternalTexture): {\r\n        addressModeU: GPUAddressMode,\r\n        addressModeV: GPUAddressMode,\r\n        addressModeW: GPUAddressMode\r\n    } {\r\n        return {\r\n            addressModeU: this._GetWrappingMode(internalTexture._cachedWrapU!),\r\n            addressModeV: this._GetWrappingMode(internalTexture._cachedWrapV!),\r\n            addressModeW: this._GetWrappingMode(internalTexture._cachedWrapR!),\r\n        };\r\n    }\r\n\r\n    private static _GetSamplerDescriptor(internalTexture: InternalTexture): GPUSamplerDescriptor {\r\n        const anisotropy = internalTexture.generateMipMaps ? (internalTexture._cachedAnisotropicFilteringLevel ?? 1) : 1;\r\n        const filterDescriptor = this._GetSamplerFilterDescriptor(internalTexture, anisotropy);\r\n        return {\r\n            ...filterDescriptor,\r\n            ...this._GetSamplerWrappingDescriptor(internalTexture),\r\n            compare: internalTexture._comparisonFunction ? WebGPUTextureHelper.GetCompareFunction(internalTexture._comparisonFunction) : undefined,\r\n            maxAnisotropy: filterDescriptor.anisotropyEnabled ? anisotropy : 1,\r\n        };\r\n    }\r\n\r\n    public getSampler(internalTexture: InternalTexture, bypassCache = false): GPUSampler {\r\n        if (this.disabled) {\r\n            return this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(internalTexture));\r\n        }\r\n\r\n        const hash = bypassCache ? 0 : WebGPUCacheSampler._GetSamplerHashCode(internalTexture);\r\n\r\n        let sampler = bypassCache ? undefined : this._samplers[hash];\r\n        if (!sampler) {\r\n            sampler =  this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(internalTexture));\r\n            if (!bypassCache) {\r\n                this._samplers[hash] = sampler;\r\n            }\r\n        }\r\n\r\n        return sampler;\r\n    }\r\n}"]}