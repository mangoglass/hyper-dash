var _maxSets = 4;
var _maxBindingsPerSet = 16;
// all types not listed are assumed to consume 1 location
var _webGLTypeToLocationSize = {
    "mat2": 2,
    "mat3": 3,
    "mat4": 4,
};
/**
 * @hidden
 */
var WebGPUShaderProcessingContext = /** @class */ (function () {
    function WebGPUShaderProcessingContext() {
        this._attributeNextLocation = 0;
        this._varyingNextLocation = 0;
        this.freeSetIndex = 2;
        this.freeBindingIndex = 0;
        this.availableVaryings = {};
        this.availableAttributes = {};
        this.availableUBOs = {};
        this.availableSamplers = {};
        this.orderedAttributes = [];
        this.orderedUBOsAndSamplers = [];
        this.uniformBufferNames = [];
        this.leftOverUniforms = [];
    }
    WebGPUShaderProcessingContext.prototype.getAttributeNextLocation = function (dataType, arrayLength) {
        var _a;
        if (arrayLength === void 0) { arrayLength = 0; }
        var index = this._attributeNextLocation;
        this._attributeNextLocation += ((_a = _webGLTypeToLocationSize[dataType]) !== null && _a !== void 0 ? _a : 1) * (arrayLength || 1);
        return index;
    };
    WebGPUShaderProcessingContext.prototype.getVaryingNextLocation = function (dataType, arrayLength) {
        var _a;
        if (arrayLength === void 0) { arrayLength = 0; }
        var index = this._varyingNextLocation;
        this._varyingNextLocation += ((_a = _webGLTypeToLocationSize[dataType]) !== null && _a !== void 0 ? _a : 1) * (arrayLength || 1);
        return index;
    };
    WebGPUShaderProcessingContext.prototype.getNextFreeUBOBinding = function () {
        return this._getNextFreeBinding(1);
    };
    WebGPUShaderProcessingContext.prototype._getNextFreeBinding = function (bindingCount) {
        if (this.freeBindingIndex > _maxBindingsPerSet - bindingCount) {
            this.freeSetIndex++;
            this.freeBindingIndex = 0;
        }
        if (this.freeSetIndex === _maxSets) {
            throw "Too many textures or UBOs have been declared and it is not supported in WebGPU.";
        }
        var returnValue = {
            setIndex: this.freeSetIndex,
            bindingIndex: this.freeBindingIndex
        };
        this.freeBindingIndex += bindingCount;
        return returnValue;
    };
    return WebGPUShaderProcessingContext;
}());
export { WebGPUShaderProcessingContext };
//# sourceMappingURL=webgpuShaderProcessingContext.js.map