{"version":3,"file":"webgpuCacheBindGroups.js","sourceRoot":"","sources":["../../../../sourceES6/core/Engines/WebGPU/webgpuCacheBindGroups.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"../../Misc/logger\";\r\nimport { WebGPUDataBuffer } from \"../../Meshes/WebGPU/webgpuDataBuffer\";\r\nimport { WebGPUCacheSampler } from \"./webgpuCacheSampler\";\r\nimport { WebGPUMaterialContext } from \"./webgpuMaterialContext\";\r\nimport { WebGPUPipelineContext } from \"./webgpuPipelineContext\";\r\nimport { WebGPUEngine } from \"../webgpuEngine\";\r\nimport { WebGPUHardwareTexture } from \"./webgpuHardwareTexture\";\r\n\r\nclass WebGPUBindGroupCacheNode {\r\n    public values: { [id: number]: WebGPUBindGroupCacheNode };\r\n    public bindGroups: GPUBindGroup[];\r\n\r\n    constructor() {\r\n        this.values = {};\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nexport class WebGPUCacheBindGroups {\r\n\r\n    public static NumBindGroupsCreatedTotal = 0;\r\n    public static NumBindGroupsCreatedLastFrame = 0;\r\n\r\n    private static _Cache: WebGPUBindGroupCacheNode = new WebGPUBindGroupCacheNode();\r\n    private static _CacheTextures: { [id: number]: WebGPUBindGroupCacheNode[] } = {};\r\n\r\n    private static _NumBindGroupsCreatedCurrentFrame = 0;\r\n\r\n    private _device: GPUDevice;\r\n    private _cacheSampler: WebGPUCacheSampler;\r\n    private _engine: WebGPUEngine;\r\n\r\n    public disabled = false;\r\n\r\n    constructor(device: GPUDevice, cacheSampler: WebGPUCacheSampler, engine: WebGPUEngine) {\r\n        this._device = device;\r\n        this._cacheSampler = cacheSampler;\r\n        this._engine = engine;\r\n    }\r\n\r\n    public endFrame(): void {\r\n        WebGPUCacheBindGroups.NumBindGroupsCreatedLastFrame = WebGPUCacheBindGroups._NumBindGroupsCreatedCurrentFrame;\r\n        WebGPUCacheBindGroups._NumBindGroupsCreatedCurrentFrame = 0;\r\n    }\r\n\r\n    /**\r\n     * Cache is currently based on the uniform buffers and textures used by the binding groups.\r\n     * In Babylon we don't have a separate standalone sampler object, the sampler properties (wrapU, wrapV, samplingMode, ...) are held by the (internal) texture itself.\r\n     * When one of these properties change for a texture (which normally does not happen often), we remove the corresponding entries from the cache (that is, all the entries\r\n     * that reference this texture, hence the need for _CacheTextures - see WebGPUCacheBindGroups.clearTextureEntries and WebGPUMaterialContext.setTexture)\r\n     * Note also that all uniform buffers have an offset of 0 in Babylon and we don't have a use case where we would have the same buffer used with different capacity values:\r\n     * that means we don't need to factor in the offset/size of the buffer in the cache, only the id\r\n     */\r\n    public getBindGroups(webgpuPipelineContext: WebGPUPipelineContext, materialContext: WebGPUMaterialContext, uniformsBuffers: { [name: string]: WebGPUDataBuffer }): GPUBindGroup[] {\r\n        let bindGroups: GPUBindGroup[] | undefined = undefined;\r\n        let node = WebGPUCacheBindGroups._Cache;\r\n\r\n        if (!this.disabled) {\r\n            for (const bufferName of webgpuPipelineContext.shaderProcessingContext.uniformBufferNames) {\r\n                const uboId = uniformsBuffers[bufferName].uniqueId;\r\n                let nextNode = node.values[uboId];\r\n                if (!nextNode) {\r\n                    nextNode = new WebGPUBindGroupCacheNode();\r\n                    node.values[uboId] = nextNode;\r\n                }\r\n                node = nextNode;\r\n            }\r\n\r\n            for (const samplerName of webgpuPipelineContext.shaderProcessingContext.samplerNames) {\r\n                const textureId = materialContext.textures[samplerName]?.texture?.uniqueId ?? 0;\r\n                let nextNode = node.values[textureId];\r\n                if (!nextNode) {\r\n                    nextNode = new WebGPUBindGroupCacheNode();\r\n                    node.values[textureId] = nextNode;\r\n                    let textureEntries = WebGPUCacheBindGroups._CacheTextures[textureId];\r\n                    if (!textureEntries) {\r\n                        textureEntries = WebGPUCacheBindGroups._CacheTextures[textureId] = [];\r\n                    }\r\n                    textureEntries.push(node);\r\n                }\r\n                node = nextNode;\r\n            }\r\n\r\n            bindGroups = node.bindGroups;\r\n        }\r\n\r\n        if (bindGroups) {\r\n            return bindGroups;\r\n        }\r\n\r\n        bindGroups = [];\r\n\r\n        if (!this.disabled) {\r\n            node.bindGroups = bindGroups;\r\n        }\r\n\r\n        WebGPUCacheBindGroups.NumBindGroupsCreatedTotal++;\r\n        WebGPUCacheBindGroups._NumBindGroupsCreatedCurrentFrame++;\r\n\r\n        const bindGroupLayouts = webgpuPipelineContext.bindGroupLayouts;\r\n\r\n        for (let i = 0; i < webgpuPipelineContext.shaderProcessingContext.orderedUBOsAndSamplers.length; i++) {\r\n            const setDefinition = webgpuPipelineContext.shaderProcessingContext.orderedUBOsAndSamplers[i];\r\n            if (setDefinition === undefined) {\r\n                let groupLayout = bindGroupLayouts[i];\r\n                bindGroups[i] = this._device.createBindGroup({\r\n                    layout: groupLayout,\r\n                    entries: [],\r\n                });\r\n                continue;\r\n            }\r\n\r\n            const entries: GPUBindGroupEntry[] = [];\r\n            for (let j = 0; j < setDefinition.length; j++) {\r\n                const bindingDefinition = webgpuPipelineContext.shaderProcessingContext.orderedUBOsAndSamplers[i][j];\r\n                if (bindingDefinition === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                if (bindingDefinition.isSampler) {\r\n                    const bindingInfo = materialContext.samplers[bindingDefinition.name];\r\n                    if (bindingInfo) {\r\n                        const texture = materialContext.textures[bindingInfo.firstTextureName]?.texture;\r\n                        if (!texture) {\r\n                            Logger.Error(`Could not create the gpu sampler \"${bindingDefinition.name}\" because no texture can be looked up for the name \"${bindingInfo.firstTextureName}\". bindingInfo=${JSON.stringify(bindingInfo)}, materialContext=${JSON.stringify(materialContext, (key: string, value: any) => key === 'texture' || key === '_cacheBindGroups' ? '<no dump>' : value)}`, 50);\r\n                            continue;\r\n                        }\r\n                        entries.push({\r\n                            binding: j,\r\n                            resource: this._cacheSampler.getSampler(texture),\r\n                        });\r\n                    } else {\r\n                        Logger.Error(`Sampler \"${bindingDefinition.name}\" could not be bound. bindingDefinition=${JSON.stringify(bindingDefinition)}, materialContext=${JSON.stringify(materialContext, (key: string, value: any) => key === 'texture' || key === '_cacheBindGroups' ? '<no dump>' : value)}`, 50);\r\n                    }\r\n                } else if (bindingDefinition.isTexture) {\r\n                    const bindingInfo = materialContext.textures[bindingDefinition.name];\r\n                    if (bindingInfo) {\r\n                        if (this._engine.dbgSanityChecks && bindingInfo.texture === null) {\r\n                            Logger.Error(`Trying to bind a null texture! bindingDefinition=${JSON.stringify(bindingDefinition)}, bindingInfo=${JSON.stringify(bindingInfo, (key: string, value: any) => key === 'texture' ? '<no dump>' : value)}`, 50);\r\n                            continue;\r\n                        }\r\n                        const hardwareTexture = bindingInfo.texture._hardwareTexture as WebGPUHardwareTexture;\r\n\r\n                        if (this._engine.dbgSanityChecks && !hardwareTexture.view) {\r\n                            Logger.Error(`Trying to bind a null gpu texture! bindingDefinition=${JSON.stringify(bindingDefinition)}, bindingInfo=${JSON.stringify(bindingInfo, (key: string, value: any) => key === 'texture' ? '<no dump>' : value)}, isReady=${bindingInfo.texture.isReady}`, 50);\r\n                            continue;\r\n                        }\r\n\r\n                        entries.push({\r\n                            binding: j,\r\n                            resource: hardwareTexture.view!,\r\n                        });\r\n                    } else {\r\n                        Logger.Error(`Texture \"${bindingDefinition.name}\" could not be bound. bindingDefinition=${JSON.stringify(bindingDefinition)}, materialContext=${JSON.stringify(materialContext, (key: string, value: any) => key === 'texture' || key === '_cacheBindGroups' ? '<no dump>' : value)}`, 50);\r\n                    }\r\n                } else {\r\n                    const dataBuffer = uniformsBuffers[bindingDefinition.name];\r\n                    if (dataBuffer) {\r\n                        const webgpuBuffer = dataBuffer.underlyingResource as GPUBuffer;\r\n                        entries.push({\r\n                            binding: j,\r\n                            resource: {\r\n                                buffer: webgpuBuffer,\r\n                                offset: 0,\r\n                                size: dataBuffer.capacity,\r\n                            },\r\n                        });\r\n                    } else {\r\n                        Logger.Error(`Can't find UBO \"${bindingDefinition.name}\". bindingDefinition=${JSON.stringify(bindingDefinition)}, _uniformsBuffers=${JSON.stringify(uniformsBuffers)}`, 50);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (entries.length > 0) {\r\n                let groupLayout = bindGroupLayouts[i];\r\n                bindGroups[i] = this._device.createBindGroup({\r\n                    layout: groupLayout,\r\n                    entries,\r\n                });\r\n            }\r\n        }\r\n\r\n        return bindGroups;\r\n    }\r\n\r\n    public clearTextureEntries(textureId: number): void {\r\n        let textureEntries = WebGPUCacheBindGroups._CacheTextures[textureId];\r\n        if (textureEntries) {\r\n            for (let i = 0; i < textureEntries.length; ++i) {\r\n                const node = textureEntries[i];\r\n                this._clearTextureNode(node, textureId.toString());\r\n                delete textureEntries[i].values[textureId];\r\n            }\r\n            delete WebGPUCacheBindGroups._CacheTextures[textureId];\r\n        }\r\n    }\r\n\r\n    private _clearTextureNode(node: WebGPUBindGroupCacheNode, excludedId: string): void {\r\n        for (const id in node.values) {\r\n            if (id !== excludedId) {\r\n                this._clearTextureNode(node.values[id], excludedId);\r\n                const entries = WebGPUCacheBindGroups._CacheTextures[id];\r\n                if (entries) {\r\n                    for (let i = 0; i < entries.length; ++i) {\r\n                        if (entries[i] === node) {\r\n                            entries.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}