// Copyright 2020 Brandon Jones
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
import * as WebGPUConstants from './webgpuConstants';
import { Scalar } from '../../Maths/math.scalar';
import { InternalTextureSource } from '../../Materials/Textures/internalTexture';
import { WebGPUHardwareTexture } from './webgpuHardwareTexture';
import { EngineStore } from "../engineStore";
// TODO WEBGPU improve mipmap generation by not using the OutputAttachment flag
// see https://github.com/toji/web-texture-tool/tree/main/src
// TODO WEBGPU optimize, don't recreate things that can be cached (bind groups, descriptors, etc)
// TODO WEBGPU use WGSL instead of GLSL
var mipmapVertexSource = "\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\n    const vec2 tex[4] = vec2[4](vec2(0.0f, 0.0f), vec2(1.0f, 0.0f), vec2(0.0f, 1.0f), vec2(1.0f, 1.0f));\n\n    layout(location = 0) out vec2 vTex;\n\n    void main() {\n        vTex = tex[gl_VertexIndex];\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\n    }\n    ";
var mipmapFragmentSource = "\n    layout(set = 0, binding = 0) uniform sampler imgSampler;\n    layout(set = 0, binding = 1) uniform texture2D img;\n\n    layout(location = 0) in vec2 vTex;\n    layout(location = 0) out vec4 outColor;\n\n    void main() {\n        outColor = texture(sampler2D(img, imgSampler), vTex);\n    }\n    ";
var invertYPreMultiplyAlphaVertexSource = "\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\n    const vec2 tex[4] = vec2[4](vec2(0.0f, 0.0f), vec2(1.0f, 0.0f), vec2(0.0f, 1.0f), vec2(1.0f, 1.0f));\n\n    layout(location = 0) out vec2 vTex;\n\n    void main() {\n        vTex = tex[gl_VertexIndex];\n    #ifdef INVERTY\n        vTex.y = 1.0 - vTex.y;\n    #endif\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\n    }\n    ";
var invertYPreMultiplyAlphaFragmentSource = "\n    layout(set = 0, binding = 0) uniform sampler imgSampler;\n    layout(set = 0, binding = 1) uniform texture2D img;\n\n    layout(location = 0) in vec2 vTex;\n    layout(location = 0) out vec4 outColor;\n\n    void main() {\n        vec4 color = texture(sampler2D(img, imgSampler), vTex);\n    #ifdef PREMULTIPLYALPHA\n        color.rgb *= color.a;\n    #endif\n        outColor = color;\n    }\n    ";
var clearVertexSource = "\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\n\n    void main() {\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\n    }\n    ";
var clearFragmentSource = "\n    layout(set = 0, binding = 0) uniform Uniforms {\n        uniform vec4 color;\n    };\n\n    layout(location = 0) out vec4 outColor;\n\n    void main() {\n        outColor = color;\n    }\n    ";
var PipelineType;
(function (PipelineType) {
    PipelineType[PipelineType["MipMap"] = 0] = "MipMap";
    PipelineType[PipelineType["InvertYPremultiplyAlpha"] = 1] = "InvertYPremultiplyAlpha";
    PipelineType[PipelineType["Clear"] = 2] = "Clear";
})(PipelineType || (PipelineType = {}));
var shadersForPipelineType = [
    { vertex: mipmapVertexSource, fragment: mipmapFragmentSource },
    { vertex: invertYPreMultiplyAlphaVertexSource, fragment: invertYPreMultiplyAlphaFragmentSource },
    { vertex: clearVertexSource, fragment: clearFragmentSource },
];
/** @hidden */
var WebGPUTextureHelper = /** @class */ (function () {
    //------------------------------------------------------------------------------
    //                         Initialization / Helpers
    //------------------------------------------------------------------------------
    function WebGPUTextureHelper(device, glslang, bufferManager) {
        this._pipelines = {};
        this._compiledShaders = [];
        this._deferredReleaseTextures = [];
        this._device = device;
        this._glslang = glslang;
        this._bufferManager = bufferManager;
        this._mipmapSampler = device.createSampler({ minFilter: WebGPUConstants.FilterMode.Linear });
        this._invertYPreMultiplyAlphaSampler = device.createSampler({ minFilter: WebGPUConstants.FilterMode.Nearest, magFilter: WebGPUConstants.FilterMode.Nearest });
        this._getPipeline(WebGPUConstants.TextureFormat.RGBA8Unorm);
    }
    WebGPUTextureHelper.ComputeNumMipmapLevels = function (width, height) {
        return Scalar.ILog2(Math.max(width, height)) + 1;
    };
    WebGPUTextureHelper.prototype._getPipeline = function (format, type, params) {
        if (type === void 0) { type = PipelineType.MipMap; }
        var index = type === PipelineType.MipMap ? 1 << 0 :
            type === PipelineType.InvertYPremultiplyAlpha ? ((params.invertY ? 1 : 0) << 1) + ((params.premultiplyAlpha ? 1 : 0) << 2) :
                type === PipelineType.Clear ? 1 << 3 : 0;
        if (!this._pipelines[format]) {
            this._pipelines[format] = [];
        }
        var pipeline = this._pipelines[format][index];
        if (!pipeline) {
            var defines = "#version 450\r\n";
            if (type === PipelineType.InvertYPremultiplyAlpha) {
                if (params.invertY) {
                    defines += "#define INVERTY\r\n";
                }
                if (params.premultiplyAlpha) {
                    defines += "#define PREMULTIPLYALPHA\r\n";
                }
            }
            var modules = this._compiledShaders[index];
            if (!modules) {
                var vertexModule = this._device.createShaderModule({
                    code: this._glslang.compileGLSL(defines + shadersForPipelineType[type].vertex, 'vertex')
                });
                var fragmentModule = this._device.createShaderModule({
                    code: this._glslang.compileGLSL(defines + shadersForPipelineType[type].fragment, 'fragment')
                });
                modules = this._compiledShaders[index] = [vertexModule, fragmentModule];
            }
            pipeline = this._pipelines[format][index] = this._device.createRenderPipeline({
                vertex: {
                    module: modules[0],
                    entryPoint: 'main',
                },
                fragment: {
                    module: modules[1],
                    entryPoint: 'main',
                    targets: [{
                            format: format,
                        }],
                },
                primitive: {
                    topology: WebGPUConstants.PrimitiveTopology.TriangleStrip,
                    stripIndexFormat: WebGPUConstants.IndexFormat.Uint16,
                },
            });
        }
        return pipeline;
    };
    WebGPUTextureHelper._GetTextureTypeFromFormat = function (format) {
        switch (format) {
            // One Component = 8 bits
            case WebGPUConstants.TextureFormat.R8Unorm:
            case WebGPUConstants.TextureFormat.R8Snorm:
            case WebGPUConstants.TextureFormat.R8Uint:
            case WebGPUConstants.TextureFormat.R8Sint:
            case WebGPUConstants.TextureFormat.RG8Unorm:
            case WebGPUConstants.TextureFormat.RG8Snorm:
            case WebGPUConstants.TextureFormat.RG8Uint:
            case WebGPUConstants.TextureFormat.RG8Sint:
            case WebGPUConstants.TextureFormat.RGBA8Unorm:
            case WebGPUConstants.TextureFormat.RGBA8UnormSRGB:
            case WebGPUConstants.TextureFormat.RGBA8Snorm:
            case WebGPUConstants.TextureFormat.RGBA8Uint:
            case WebGPUConstants.TextureFormat.RGBA8Sint:
            case WebGPUConstants.TextureFormat.BGRA8Unorm:
            case WebGPUConstants.TextureFormat.BGRA8UnormSRGB:
            case WebGPUConstants.TextureFormat.RGB10A2Unorm: // composite format - let's say it's byte...
            case WebGPUConstants.TextureFormat.RGB9E5UFloat: // composite format - let's say it's byte...
            case WebGPUConstants.TextureFormat.RG11B10UFloat: // composite format - let's say it's byte...
            case WebGPUConstants.TextureFormat.Depth24UnormStencil8: // composite format - let's say it's byte...
            case WebGPUConstants.TextureFormat.Depth32FloatStencil8: // composite format - let's say it's byte...
            case WebGPUConstants.TextureFormat.BC7RGBAUnorm:
            case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:
            case WebGPUConstants.TextureFormat.BC6HRGBUFloat:
            case WebGPUConstants.TextureFormat.BC6HRGBFloat:
            case WebGPUConstants.TextureFormat.BC5RGUnorm:
            case WebGPUConstants.TextureFormat.BC5RGSnorm:
            case WebGPUConstants.TextureFormat.BC3RGBAUnorm:
            case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:
            case WebGPUConstants.TextureFormat.BC2RGBAUnorm:
            case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:
            case WebGPUConstants.TextureFormat.BC4RUnorm:
            case WebGPUConstants.TextureFormat.BC4RSnorm:
            case WebGPUConstants.TextureFormat.BC1RGBAUnorm:
            case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:
                return 0;
            // One component = 16 bits
            case WebGPUConstants.TextureFormat.R16Uint:
            case WebGPUConstants.TextureFormat.R16Sint:
            case WebGPUConstants.TextureFormat.RG16Uint:
            case WebGPUConstants.TextureFormat.RG16Sint:
            case WebGPUConstants.TextureFormat.RGBA16Uint:
            case WebGPUConstants.TextureFormat.RGBA16Sint:
            case WebGPUConstants.TextureFormat.Depth16Unorm:
                return 5;
            case WebGPUConstants.TextureFormat.R16Float:
            case WebGPUConstants.TextureFormat.RG16Float:
            case WebGPUConstants.TextureFormat.RGBA16Float:
                return 2;
            // One component = 32 bits
            case WebGPUConstants.TextureFormat.R32Uint:
            case WebGPUConstants.TextureFormat.R32Sint:
            case WebGPUConstants.TextureFormat.RG32Uint:
            case WebGPUConstants.TextureFormat.RG32Sint:
            case WebGPUConstants.TextureFormat.RGBA32Uint:
            case WebGPUConstants.TextureFormat.RGBA32Sint:
                return 7;
            case WebGPUConstants.TextureFormat.R32Float:
            case WebGPUConstants.TextureFormat.RG32Float:
            case WebGPUConstants.TextureFormat.RGBA32Float:
            case WebGPUConstants.TextureFormat.Depth32Float:
                return 1;
            case WebGPUConstants.TextureFormat.Stencil8:
                throw "No fixed size for Stencil8 format!";
            case WebGPUConstants.TextureFormat.Depth24Plus:
                throw "No fixed size for Depth24Plus format!";
            case WebGPUConstants.TextureFormat.Depth24PlusStencil8:
                throw "No fixed size for Depth24PlusStencil8 format!";
        }
        return 0;
    };
    WebGPUTextureHelper._GetBlockInformationFromFormat = function (format) {
        switch (format) {
            // 8 bits formats
            case WebGPUConstants.TextureFormat.R8Unorm:
            case WebGPUConstants.TextureFormat.R8Snorm:
            case WebGPUConstants.TextureFormat.R8Uint:
            case WebGPUConstants.TextureFormat.R8Sint:
                return { width: 1, height: 1, length: 1 };
            // 16 bits formats
            case WebGPUConstants.TextureFormat.R16Uint:
            case WebGPUConstants.TextureFormat.R16Sint:
            case WebGPUConstants.TextureFormat.R16Float:
            case WebGPUConstants.TextureFormat.RG8Unorm:
            case WebGPUConstants.TextureFormat.RG8Snorm:
            case WebGPUConstants.TextureFormat.RG8Uint:
            case WebGPUConstants.TextureFormat.RG8Sint:
                return { width: 1, height: 1, length: 2 };
            // 32 bits formats
            case WebGPUConstants.TextureFormat.R32Uint:
            case WebGPUConstants.TextureFormat.R32Sint:
            case WebGPUConstants.TextureFormat.R32Float:
            case WebGPUConstants.TextureFormat.RG16Uint:
            case WebGPUConstants.TextureFormat.RG16Sint:
            case WebGPUConstants.TextureFormat.RG16Float:
            case WebGPUConstants.TextureFormat.RGBA8Unorm:
            case WebGPUConstants.TextureFormat.RGBA8UnormSRGB:
            case WebGPUConstants.TextureFormat.RGBA8Snorm:
            case WebGPUConstants.TextureFormat.RGBA8Uint:
            case WebGPUConstants.TextureFormat.RGBA8Sint:
            case WebGPUConstants.TextureFormat.BGRA8Unorm:
            case WebGPUConstants.TextureFormat.BGRA8UnormSRGB:
            case WebGPUConstants.TextureFormat.RGB9E5UFloat:
            case WebGPUConstants.TextureFormat.RGB10A2Unorm:
            case WebGPUConstants.TextureFormat.RG11B10UFloat:
                return { width: 1, height: 1, length: 4 };
            // 64 bits formats
            case WebGPUConstants.TextureFormat.RG32Uint:
            case WebGPUConstants.TextureFormat.RG32Sint:
            case WebGPUConstants.TextureFormat.RG32Float:
            case WebGPUConstants.TextureFormat.RGBA16Uint:
            case WebGPUConstants.TextureFormat.RGBA16Sint:
            case WebGPUConstants.TextureFormat.RGBA16Float:
                return { width: 1, height: 1, length: 8 };
            // 128 bits formats
            case WebGPUConstants.TextureFormat.RGBA32Uint:
            case WebGPUConstants.TextureFormat.RGBA32Sint:
            case WebGPUConstants.TextureFormat.RGBA32Float:
                return { width: 1, height: 1, length: 16 };
            // Depth and stencil formats
            case WebGPUConstants.TextureFormat.Stencil8:
                throw "No fixed size for Stencil8 format!";
            case WebGPUConstants.TextureFormat.Depth16Unorm:
                return { width: 1, height: 1, length: 2 };
            case WebGPUConstants.TextureFormat.Depth24Plus:
                throw "No fixed size for Depth24Plus format!";
            case WebGPUConstants.TextureFormat.Depth24PlusStencil8:
                throw "No fixed size for Depth24PlusStencil8 format!";
            case WebGPUConstants.TextureFormat.Depth32Float:
                return { width: 1, height: 1, length: 4 };
            case WebGPUConstants.TextureFormat.Depth24UnormStencil8:
                return { width: 1, height: 1, length: 4 };
            case WebGPUConstants.TextureFormat.Depth32FloatStencil8:
                return { width: 1, height: 1, length: 5 };
            // BC compressed formats usable if "texture-compression-bc" is both
            // supported by the device/user agent and enabled in requestDevice.
            case WebGPUConstants.TextureFormat.BC7RGBAUnorm:
            case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:
            case WebGPUConstants.TextureFormat.BC6HRGBUFloat:
            case WebGPUConstants.TextureFormat.BC6HRGBFloat:
            case WebGPUConstants.TextureFormat.BC5RGUnorm:
            case WebGPUConstants.TextureFormat.BC5RGSnorm:
            case WebGPUConstants.TextureFormat.BC3RGBAUnorm:
            case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:
            case WebGPUConstants.TextureFormat.BC2RGBAUnorm:
            case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:
                return { width: 4, height: 4, length: 16 };
            case WebGPUConstants.TextureFormat.BC4RUnorm:
            case WebGPUConstants.TextureFormat.BC4RSnorm:
            case WebGPUConstants.TextureFormat.BC1RGBAUnorm:
            case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:
                return { width: 4, height: 4, length: 8 };
        }
        return { width: 1, height: 1, length: 4 };
    };
    WebGPUTextureHelper._IsHardwareTexture = function (texture) {
        return !!texture.release;
    };
    WebGPUTextureHelper._IsInternalTexture = function (texture) {
        return !!texture.dispose;
    };
    WebGPUTextureHelper.GetCompareFunction = function (compareFunction) {
        switch (compareFunction) {
            case 519:
                return WebGPUConstants.CompareFunction.Always;
            case 514:
                return WebGPUConstants.CompareFunction.Equal;
            case 516:
                return WebGPUConstants.CompareFunction.Greater;
            case 518:
                return WebGPUConstants.CompareFunction.GreaterEqual;
            case 513:
                return WebGPUConstants.CompareFunction.Less;
            case 515:
                return WebGPUConstants.CompareFunction.LessEqual;
            case 512:
                return WebGPUConstants.CompareFunction.Never;
            case 517:
                return WebGPUConstants.CompareFunction.NotEqual;
            default:
                return WebGPUConstants.CompareFunction.Less;
        }
    };
    WebGPUTextureHelper.IsImageBitmap = function (imageBitmap) {
        return imageBitmap.close !== undefined;
    };
    WebGPUTextureHelper.IsImageBitmapArray = function (imageBitmap) {
        return Array.isArray(imageBitmap) && imageBitmap[0].close !== undefined;
    };
    WebGPUTextureHelper.prototype.setCommandEncoder = function (encoder) {
        this._commandEncoderForCreation = encoder;
    };
    WebGPUTextureHelper.IsCompressedFormat = function (format) {
        switch (format) {
            case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:
            case WebGPUConstants.TextureFormat.BC7RGBAUnorm:
            case WebGPUConstants.TextureFormat.BC6HRGBFloat:
            case WebGPUConstants.TextureFormat.BC6HRGBUFloat:
            case WebGPUConstants.TextureFormat.BC5RGSnorm:
            case WebGPUConstants.TextureFormat.BC5RGUnorm:
            case WebGPUConstants.TextureFormat.BC4RSnorm:
            case WebGPUConstants.TextureFormat.BC4RUnorm:
            case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:
            case WebGPUConstants.TextureFormat.BC3RGBAUnorm:
            case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:
            case WebGPUConstants.TextureFormat.BC2RGBAUnorm:
            case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:
            case WebGPUConstants.TextureFormat.BC1RGBAUnorm:
                return true;
        }
        return false;
    };
    WebGPUTextureHelper.GetWebGPUTextureFormat = function (type, format, useSRGBBuffer) {
        if (useSRGBBuffer === void 0) { useSRGBBuffer = false; }
        switch (format) {
            case 13:
                return WebGPUConstants.TextureFormat.Depth24PlusStencil8;
            case 14:
                return WebGPUConstants.TextureFormat.Depth32Float;
            case 36492:
                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC7RGBAUnorm;
            case 36495:
                return WebGPUConstants.TextureFormat.BC6HRGBUFloat;
            case 36494:
                return WebGPUConstants.TextureFormat.BC6HRGBFloat;
            case 33779:
                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC3RGBAUnorm;
            case 33778:
                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC2RGBAUnorm;
            case 33777:
                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC1RGBAUnorm;
        }
        switch (type) {
            case 3:
                switch (format) {
                    case 6:
                        return WebGPUConstants.TextureFormat.R8Snorm;
                    case 7:
                        return WebGPUConstants.TextureFormat.RG8Snorm;
                    case 4:
                        throw "RGB format not supported in WebGPU";
                    case 8:
                        return WebGPUConstants.TextureFormat.R8Sint;
                    case 9:
                        return WebGPUConstants.TextureFormat.RG8Sint;
                    case 10:
                        throw "RGB_INTEGER format not supported in WebGPU";
                    case 11:
                        return WebGPUConstants.TextureFormat.RGBA8Sint;
                    default:
                        return WebGPUConstants.TextureFormat.RGBA8Snorm;
                }
            case 0:
                switch (format) {
                    case 6:
                        return WebGPUConstants.TextureFormat.R8Unorm;
                    case 7:
                        return WebGPUConstants.TextureFormat.RG8Unorm;
                    case 4:
                        throw "TEXTUREFORMAT_RGB format not supported in WebGPU";
                    case 5:
                        return useSRGBBuffer ? WebGPUConstants.TextureFormat.RGBA8UnormSRGB : WebGPUConstants.TextureFormat.RGBA8Unorm;
                    case 12:
                        return useSRGBBuffer ? WebGPUConstants.TextureFormat.BGRA8UnormSRGB : WebGPUConstants.TextureFormat.BGRA8Unorm;
                    case 8:
                        return WebGPUConstants.TextureFormat.R8Uint;
                    case 9:
                        return WebGPUConstants.TextureFormat.RG8Uint;
                    case 10:
                        throw "RGB_INTEGER format not supported in WebGPU";
                    case 11:
                        return WebGPUConstants.TextureFormat.RGBA8Uint;
                    case 0:
                        throw "TEXTUREFORMAT_ALPHA format not supported in WebGPU";
                    case 1:
                        throw "TEXTUREFORMAT_LUMINANCE format not supported in WebGPU";
                    case 2:
                        throw "TEXTUREFORMAT_LUMINANCE_ALPHA format not supported in WebGPU";
                    default:
                        return WebGPUConstants.TextureFormat.RGBA8Unorm;
                }
            case 4:
                switch (format) {
                    case 8:
                        return WebGPUConstants.TextureFormat.R16Sint;
                    case 9:
                        return WebGPUConstants.TextureFormat.RG16Sint;
                    case 10:
                        throw "TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU";
                    case 11:
                        return WebGPUConstants.TextureFormat.RGBA16Sint;
                    default:
                        return WebGPUConstants.TextureFormat.RGBA16Sint;
                }
            case 5:
                switch (format) {
                    case 8:
                        return WebGPUConstants.TextureFormat.R16Uint;
                    case 9:
                        return WebGPUConstants.TextureFormat.RG16Uint;
                    case 10:
                        throw "TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU";
                    case 11:
                        return WebGPUConstants.TextureFormat.RGBA16Uint;
                    default:
                        return WebGPUConstants.TextureFormat.RGBA16Uint;
                }
            case 6:
                switch (format) {
                    case 8:
                        return WebGPUConstants.TextureFormat.R32Sint;
                    case 9:
                        return WebGPUConstants.TextureFormat.RG32Sint;
                    case 10:
                        throw "TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU";
                    case 11:
                        return WebGPUConstants.TextureFormat.RGBA32Sint;
                    default:
                        return WebGPUConstants.TextureFormat.RGBA32Sint;
                }
            case 7: // Refers to UNSIGNED_INT
                switch (format) {
                    case 8:
                        return WebGPUConstants.TextureFormat.R32Uint;
                    case 9:
                        return WebGPUConstants.TextureFormat.RG32Uint;
                    case 10:
                        throw "TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU";
                    case 11:
                        return WebGPUConstants.TextureFormat.RGBA32Uint;
                    default:
                        return WebGPUConstants.TextureFormat.RGBA32Uint;
                }
            case 1:
                switch (format) {
                    case 6:
                        return WebGPUConstants.TextureFormat.R32Float; // By default. Other possibility is R16Float.
                    case 7:
                        return WebGPUConstants.TextureFormat.RG32Float; // By default. Other possibility is RG16Float.
                    case 4:
                        throw "TEXTUREFORMAT_RGB format not supported in WebGPU";
                    case 5:
                        return WebGPUConstants.TextureFormat.RGBA32Float; // By default. Other possibility is RGBA16Float.
                    default:
                        return WebGPUConstants.TextureFormat.RGBA32Float;
                }
            case 2:
                switch (format) {
                    case 6:
                        return WebGPUConstants.TextureFormat.R16Float;
                    case 7:
                        return WebGPUConstants.TextureFormat.RG16Float;
                    case 4:
                        throw "TEXTUREFORMAT_RGB format not supported in WebGPU";
                    case 5:
                        return WebGPUConstants.TextureFormat.RGBA16Float;
                    default:
                        return WebGPUConstants.TextureFormat.RGBA16Float;
                }
            case 10:
                throw "TEXTURETYPE_UNSIGNED_SHORT_5_6_5 format not supported in WebGPU";
            case 13:
                throw "TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV format not supported in WebGPU";
            case 14:
                throw "TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV format not supported in WebGPU";
            case 8:
                throw "TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 format not supported in WebGPU";
            case 9:
                throw "TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 format not supported in WebGPU";
            case 11:
                switch (format) {
                    case 5:
                        return WebGPUConstants.TextureFormat.RGB10A2Unorm;
                    case 11:
                        throw "TEXTUREFORMAT_RGBA_INTEGER format not supported in WebGPU when type is TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV";
                    default:
                        return WebGPUConstants.TextureFormat.RGB10A2Unorm;
                }
        }
        return useSRGBBuffer ? WebGPUConstants.TextureFormat.RGBA8UnormSRGB : WebGPUConstants.TextureFormat.RGBA8Unorm;
    };
    WebGPUTextureHelper.prototype.invertYPreMultiplyAlpha = function (gpuTexture, width, height, format, invertY, premultiplyAlpha, faceIndex, commandEncoder) {
        var _a, _b, _c, _d;
        if (invertY === void 0) { invertY = false; }
        if (premultiplyAlpha === void 0) { premultiplyAlpha = false; }
        if (faceIndex === void 0) { faceIndex = 0; }
        var useOwnCommandEncoder = commandEncoder === undefined;
        var pipeline = this._getPipeline(format, PipelineType.InvertYPremultiplyAlpha, { invertY: invertY, premultiplyAlpha: premultiplyAlpha });
        var bindGroupLayout = pipeline.getBindGroupLayout(0);
        if (useOwnCommandEncoder) {
            commandEncoder = this._device.createCommandEncoder({});
        }
        (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, "internal process texture - invertY=" + invertY + " premultiplyAlpha=" + premultiplyAlpha);
        var outputTexture = this.createTexture({ width: width, height: height, layers: 1 }, false, false, false, false, false, format, 1, commandEncoder, WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.Sampled);
        var passEncoder = commandEncoder.beginRenderPass({
            colorAttachments: [{
                    view: outputTexture.createView({
                        format: format,
                        dimension: WebGPUConstants.TextureViewDimension.E2d,
                        baseMipLevel: 0,
                        mipLevelCount: 1,
                        arrayLayerCount: 1,
                        baseArrayLayer: 0,
                    }),
                    loadValue: WebGPUConstants.LoadOp.Load,
                    storeOp: WebGPUConstants.StoreOp.Store,
                }],
        });
        var bindGroup = this._device.createBindGroup({
            layout: bindGroupLayout,
            entries: [{
                    binding: 0,
                    resource: this._invertYPreMultiplyAlphaSampler,
                }, {
                    binding: 1,
                    resource: gpuTexture.createView({
                        format: format,
                        dimension: WebGPUConstants.TextureViewDimension.E2d,
                        baseMipLevel: 0,
                        mipLevelCount: 1,
                        arrayLayerCount: 1,
                        baseArrayLayer: faceIndex,
                    }),
                }],
        });
        passEncoder.setPipeline(pipeline);
        passEncoder.setBindGroup(0, bindGroup);
        passEncoder.draw(4, 1, 0, 0);
        passEncoder.endPass();
        commandEncoder.copyTextureToTexture({
            texture: outputTexture,
        }, {
            texture: gpuTexture,
            origin: {
                x: 0,
                y: 0,
                z: Math.max(faceIndex, 0),
            }
        }, {
            width: width,
            height: height,
            depthOrArrayLayers: 1,
        });
        this._deferredReleaseTextures.push([outputTexture, null, null]);
        (_d = (_c = commandEncoder).popDebugGroup) === null || _d === void 0 ? void 0 : _d.call(_c);
        if (useOwnCommandEncoder) {
            this._device.queue.submit([commandEncoder.finish()]);
            commandEncoder = null;
        }
    };
    WebGPUTextureHelper.prototype.copyWithInvertY = function (srcTextureView, format, renderPassDescriptor, commandEncoder) {
        var _a, _b, _c, _d;
        var useOwnCommandEncoder = commandEncoder === undefined;
        var pipeline = this._getPipeline(format, PipelineType.InvertYPremultiplyAlpha, { invertY: true, premultiplyAlpha: false });
        var bindGroupLayout = pipeline.getBindGroupLayout(0);
        if (useOwnCommandEncoder) {
            commandEncoder = this._device.createCommandEncoder({});
        }
        (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, "internal copy texture with invertY");
        var passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);
        var bindGroup = this._device.createBindGroup({
            layout: bindGroupLayout,
            entries: [{
                    binding: 0,
                    resource: this._invertYPreMultiplyAlphaSampler,
                }, {
                    binding: 1,
                    resource: srcTextureView,
                }],
        });
        passEncoder.setPipeline(pipeline);
        passEncoder.setBindGroup(0, bindGroup);
        passEncoder.draw(4, 1, 0, 0);
        passEncoder.endPass();
        (_d = (_c = commandEncoder).popDebugGroup) === null || _d === void 0 ? void 0 : _d.call(_c);
        if (useOwnCommandEncoder) {
            this._device.queue.submit([commandEncoder.finish()]);
            commandEncoder = null;
        }
    };
    //------------------------------------------------------------------------------
    //                               Creation
    //------------------------------------------------------------------------------
    WebGPUTextureHelper.prototype.createTexture = function (imageBitmap, hasMipmaps, generateMipmaps, invertY, premultiplyAlpha, is3D, format, sampleCount, commandEncoder, usage, additionalUsages) {
        if (hasMipmaps === void 0) { hasMipmaps = false; }
        if (generateMipmaps === void 0) { generateMipmaps = false; }
        if (invertY === void 0) { invertY = false; }
        if (premultiplyAlpha === void 0) { premultiplyAlpha = false; }
        if (is3D === void 0) { is3D = false; }
        if (format === void 0) { format = WebGPUConstants.TextureFormat.RGBA8Unorm; }
        if (sampleCount === void 0) { sampleCount = 1; }
        if (usage === void 0) { usage = -1; }
        if (additionalUsages === void 0) { additionalUsages = 0; }
        if (sampleCount > 1) {
            // TODO WEBGPU for the time being, Chrome only accepts values of 1 or 4
            sampleCount = 4;
        }
        var layerCount = imageBitmap.layers || 1;
        var textureSize = {
            width: imageBitmap.width,
            height: imageBitmap.height,
            depthOrArrayLayers: layerCount,
        };
        var isCompressedFormat = WebGPUTextureHelper.IsCompressedFormat(format);
        var mipLevelCount = hasMipmaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(imageBitmap.width, imageBitmap.height) : 1;
        var usages = usage >= 0 ? usage : WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.CopyDst | WebGPUConstants.TextureUsage.Sampled;
        additionalUsages |= hasMipmaps && !isCompressedFormat ? WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment : 0;
        if (!isCompressedFormat) {
            // we don't know in advance if the texture will be updated with copyImageBitmapToTexture (which requires to have those flags), so we need to force the flags all the times
            additionalUsages |= WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.CopyDst;
        }
        var gpuTexture = this._device.createTexture({
            size: textureSize,
            dimension: is3D ? WebGPUConstants.TextureDimension.E3d : WebGPUConstants.TextureDimension.E2d,
            format: format,
            usage: usages | additionalUsages,
            sampleCount: sampleCount,
            mipLevelCount: mipLevelCount
        });
        if (WebGPUTextureHelper.IsImageBitmap(imageBitmap)) {
            this.updateTexture(imageBitmap, gpuTexture, imageBitmap.width, imageBitmap.height, layerCount, format, 0, 0, invertY, premultiplyAlpha, 0, 0, commandEncoder);
            if (hasMipmaps && generateMipmaps) {
                this.generateMipmaps(gpuTexture, format, mipLevelCount, 0, commandEncoder);
            }
        }
        return gpuTexture;
    };
    WebGPUTextureHelper.prototype.createCubeTexture = function (imageBitmaps, hasMipmaps, generateMipmaps, invertY, premultiplyAlpha, format, sampleCount, commandEncoder, usage, additionalUsages) {
        if (hasMipmaps === void 0) { hasMipmaps = false; }
        if (generateMipmaps === void 0) { generateMipmaps = false; }
        if (invertY === void 0) { invertY = false; }
        if (premultiplyAlpha === void 0) { premultiplyAlpha = false; }
        if (format === void 0) { format = WebGPUConstants.TextureFormat.RGBA8Unorm; }
        if (sampleCount === void 0) { sampleCount = 1; }
        if (usage === void 0) { usage = -1; }
        if (additionalUsages === void 0) { additionalUsages = 0; }
        if (sampleCount > 1) {
            // TODO WEBGPU for the time being, Chrome only accepts values of 1 or 4
            sampleCount = 4;
        }
        var width = WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps) ? imageBitmaps[0].width : imageBitmaps.width;
        var height = WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps) ? imageBitmaps[0].height : imageBitmaps.height;
        var isCompressedFormat = WebGPUTextureHelper.IsCompressedFormat(format);
        var mipLevelCount = hasMipmaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(width, height) : 1;
        var usages = usage >= 0 ? usage : WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.CopyDst | WebGPUConstants.TextureUsage.Sampled;
        additionalUsages |= hasMipmaps && !isCompressedFormat ? WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment : 0;
        if (!isCompressedFormat) {
            // we don't know in advance if the texture will be updated with copyImageBitmapToTexture (which requires to have those flags), so we need to force the flags all the times
            additionalUsages |= WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.CopyDst;
        }
        var gpuTexture = this._device.createTexture({
            size: {
                width: width,
                height: height,
                depthOrArrayLayers: 6,
            },
            dimension: WebGPUConstants.TextureDimension.E2d,
            format: format,
            usage: usages | additionalUsages,
            sampleCount: sampleCount,
            mipLevelCount: mipLevelCount
        });
        if (WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps)) {
            this.updateCubeTextures(imageBitmaps, gpuTexture, width, height, format, invertY, premultiplyAlpha, 0, 0, commandEncoder);
            if (hasMipmaps && generateMipmaps) {
                this.generateCubeMipmaps(gpuTexture, format, mipLevelCount, commandEncoder);
            }
        }
        return gpuTexture;
    };
    WebGPUTextureHelper.prototype.generateCubeMipmaps = function (gpuTexture, format, mipLevelCount, commandEncoder) {
        var _a, _b, _c, _d;
        var useOwnCommandEncoder = commandEncoder === undefined;
        if (useOwnCommandEncoder) {
            commandEncoder = this._device.createCommandEncoder({});
        }
        (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, "create cube mipmaps - " + mipLevelCount + " levels");
        for (var f = 0; f < 6; ++f) {
            this.generateMipmaps(gpuTexture, format, mipLevelCount, f, commandEncoder);
        }
        (_d = (_c = commandEncoder).popDebugGroup) === null || _d === void 0 ? void 0 : _d.call(_c);
        if (useOwnCommandEncoder) {
            this._device.queue.submit([commandEncoder.finish()]);
            commandEncoder = null;
        }
    };
    WebGPUTextureHelper.prototype.generateMipmaps = function (gpuTexture, format, mipLevelCount, faceIndex, commandEncoder) {
        var _a, _b, _c, _d;
        if (faceIndex === void 0) { faceIndex = 0; }
        var useOwnCommandEncoder = commandEncoder === undefined;
        var pipeline = this._getPipeline(format);
        var bindGroupLayout = pipeline.getBindGroupLayout(0);
        if (useOwnCommandEncoder) {
            commandEncoder = this._device.createCommandEncoder({});
        }
        (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, "create mipmaps for face #" + faceIndex + " - " + mipLevelCount + " levels");
        for (var i = 1; i < mipLevelCount; ++i) {
            var passEncoder = commandEncoder.beginRenderPass({
                colorAttachments: [{
                        view: gpuTexture.createView({
                            format: format,
                            dimension: WebGPUConstants.TextureViewDimension.E2d,
                            baseMipLevel: i,
                            mipLevelCount: 1,
                            arrayLayerCount: 1,
                            baseArrayLayer: faceIndex,
                        }),
                        loadValue: WebGPUConstants.LoadOp.Load,
                        storeOp: WebGPUConstants.StoreOp.Store,
                    }],
            });
            var bindGroup = this._device.createBindGroup({
                layout: bindGroupLayout,
                entries: [{
                        binding: 0,
                        resource: this._mipmapSampler,
                    }, {
                        binding: 1,
                        resource: gpuTexture.createView({
                            format: format,
                            dimension: WebGPUConstants.TextureViewDimension.E2d,
                            baseMipLevel: i - 1,
                            mipLevelCount: 1,
                            arrayLayerCount: 1,
                            baseArrayLayer: faceIndex,
                        }),
                    }],
            });
            passEncoder.setPipeline(pipeline);
            passEncoder.setBindGroup(0, bindGroup);
            passEncoder.draw(4, 1, 0, 0);
            passEncoder.endPass();
        }
        (_d = (_c = commandEncoder).popDebugGroup) === null || _d === void 0 ? void 0 : _d.call(_c);
        if (useOwnCommandEncoder) {
            this._device.queue.submit([commandEncoder.finish()]);
            commandEncoder = null;
        }
    };
    WebGPUTextureHelper.prototype.createGPUTextureForInternalTexture = function (texture, width, height, depth, creationFlags) {
        if (!texture._hardwareTexture) {
            texture._hardwareTexture = new WebGPUHardwareTexture();
        }
        if (width === undefined) {
            width = texture.width;
        }
        if (height === undefined) {
            height = texture.height;
        }
        if (depth === undefined) {
            depth = texture.depth;
        }
        var gpuTextureWrapper = texture._hardwareTexture;
        gpuTextureWrapper.format = WebGPUTextureHelper.GetWebGPUTextureFormat(texture.type, texture.format, texture._useSRGBBuffer);
        gpuTextureWrapper.textureUsages =
            texture._source === InternalTextureSource.RenderTarget || texture.source === InternalTextureSource.MultiRenderTarget ? WebGPUConstants.TextureUsage.Sampled | WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment :
                texture._source === InternalTextureSource.Depth ? WebGPUConstants.TextureUsage.Sampled | WebGPUConstants.TextureUsage.RenderAttachment : -1;
        gpuTextureWrapper.textureAdditionalUsages = (creationFlags !== null && creationFlags !== void 0 ? creationFlags : 0) & 1 ? WebGPUConstants.TextureUsage.Storage : 0;
        var hasMipMaps = texture.generateMipMaps;
        var layerCount = depth || 1;
        if (texture.isCube) {
            var gpuTexture = this.createCubeTexture({ width: width, height: height }, texture.generateMipMaps, texture.generateMipMaps, texture.invertY, false, gpuTextureWrapper.format, 1, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);
            gpuTextureWrapper.set(gpuTexture);
            gpuTextureWrapper.createView({
                format: gpuTextureWrapper.format,
                dimension: WebGPUConstants.TextureViewDimension.Cube,
                mipLevelCount: hasMipMaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(width, height) : 1,
                baseArrayLayer: 0,
                baseMipLevel: 0,
                arrayLayerCount: 6,
                aspect: WebGPUConstants.TextureAspect.All
            });
        }
        else {
            var gpuTexture = this.createTexture({ width: width, height: height, layers: layerCount }, texture.generateMipMaps, texture.generateMipMaps, texture.invertY, false, texture.is3D, gpuTextureWrapper.format, 1, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);
            gpuTextureWrapper.set(gpuTexture);
            gpuTextureWrapper.createView({
                format: gpuTextureWrapper.format,
                dimension: texture.is2DArray ? WebGPUConstants.TextureViewDimension.E2dArray : texture.is3D ? WebGPUConstants.TextureDimension.E3d : WebGPUConstants.TextureViewDimension.E2d,
                mipLevelCount: hasMipMaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(width, height) : 1,
                baseArrayLayer: 0,
                baseMipLevel: 0,
                arrayLayerCount: layerCount,
                aspect: WebGPUConstants.TextureAspect.All
            });
        }
        texture.width = texture.baseWidth = width;
        texture.height = texture.baseHeight = height;
        texture.depth = texture.baseDepth = depth;
        this.createMSAATexture(texture, texture.samples);
        return gpuTextureWrapper;
    };
    WebGPUTextureHelper.prototype.createMSAATexture = function (texture, samples) {
        var gpuTextureWrapper = texture._hardwareTexture;
        if (gpuTextureWrapper === null || gpuTextureWrapper === void 0 ? void 0 : gpuTextureWrapper.msaaTexture) {
            this.releaseTexture(gpuTextureWrapper.msaaTexture);
            gpuTextureWrapper.msaaTexture = null;
        }
        if (!gpuTextureWrapper || (samples !== null && samples !== void 0 ? samples : 1) <= 1) {
            return;
        }
        var width = texture.width;
        var height = texture.height;
        var layerCount = texture.depth || 1;
        if (texture.isCube) {
            var gpuMSAATexture = this.createCubeTexture({ width: width, height: height }, false, false, texture.invertY, false, gpuTextureWrapper.format, samples, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);
            gpuTextureWrapper.setMSAATexture(gpuMSAATexture);
        }
        else {
            var gpuMSAATexture = this.createTexture({ width: width, height: height, layers: layerCount }, false, false, texture.invertY, false, texture.is3D, gpuTextureWrapper.format, samples, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);
            gpuTextureWrapper.setMSAATexture(gpuMSAATexture);
        }
    };
    //------------------------------------------------------------------------------
    //                                  Update
    //------------------------------------------------------------------------------
    WebGPUTextureHelper.prototype.updateCubeTextures = function (imageBitmaps, gpuTexture, width, height, format, invertY, premultiplyAlpha, offsetX, offsetY, commandEncoder) {
        if (invertY === void 0) { invertY = false; }
        if (premultiplyAlpha === void 0) { premultiplyAlpha = false; }
        if (offsetX === void 0) { offsetX = 0; }
        if (offsetY === void 0) { offsetY = 0; }
        var faces = [0, 3, 1, 4, 2, 5];
        for (var f = 0; f < faces.length; ++f) {
            var imageBitmap = imageBitmaps[faces[f]];
            this.updateTexture(imageBitmap, gpuTexture, width, height, 1, format, f, 0, invertY, premultiplyAlpha, offsetX, offsetY, commandEncoder);
        }
    };
    // TODO WEBGPU handle data source not being in the same format than the destination texture?
    WebGPUTextureHelper.prototype.updateTexture = function (imageBitmap, texture, width, height, layers, format, faceIndex, mipLevel, invertY, premultiplyAlpha, offsetX, offsetY, commandEncoder) {
        var _this = this;
        if (faceIndex === void 0) { faceIndex = 0; }
        if (mipLevel === void 0) { mipLevel = 0; }
        if (invertY === void 0) { invertY = false; }
        if (premultiplyAlpha === void 0) { premultiplyAlpha = false; }
        if (offsetX === void 0) { offsetX = 0; }
        if (offsetY === void 0) { offsetY = 0; }
        var gpuTexture = WebGPUTextureHelper._IsInternalTexture(texture) ? texture._hardwareTexture.underlyingResource : texture;
        var blockInformation = WebGPUTextureHelper._GetBlockInformationFromFormat(format);
        var textureCopyView = {
            texture: gpuTexture,
            origin: {
                x: offsetX,
                y: offsetY,
                z: Math.max(faceIndex, 0)
            },
            mipLevel: mipLevel
        };
        var textureExtent = {
            width: Math.ceil(width / blockInformation.width) * blockInformation.width,
            height: Math.ceil(height / blockInformation.height) * blockInformation.height,
            depthOrArrayLayers: layers || 1
        };
        if (imageBitmap.byteLength !== undefined) {
            imageBitmap = imageBitmap;
            var bytesPerRow = Math.ceil(width / blockInformation.width) * blockInformation.length;
            var aligned = Math.ceil(bytesPerRow / 256) * 256 === bytesPerRow;
            if (aligned) {
                var useOwnCommandEncoder = commandEncoder === undefined;
                if (useOwnCommandEncoder) {
                    commandEncoder = this._device.createCommandEncoder({});
                }
                var buffer = this._bufferManager.createRawBuffer(imageBitmap.byteLength, WebGPUConstants.BufferUsage.MapWrite | WebGPUConstants.BufferUsage.CopySrc, true);
                var arrayBuffer = buffer.getMappedRange();
                new Uint8Array(arrayBuffer).set(imageBitmap);
                buffer.unmap();
                commandEncoder.copyBufferToTexture({
                    buffer: buffer,
                    offset: 0,
                    bytesPerRow: bytesPerRow,
                    rowsPerImage: height,
                }, textureCopyView, textureExtent);
                if (useOwnCommandEncoder) {
                    this._device.queue.submit([commandEncoder.finish()]);
                    commandEncoder = null;
                }
                this._bufferManager.releaseBuffer(buffer);
            }
            else {
                this._device.queue.writeTexture(textureCopyView, imageBitmap, {
                    offset: 0,
                    bytesPerRow: bytesPerRow,
                    rowsPerImage: height,
                }, textureExtent);
            }
            if (invertY || premultiplyAlpha) {
                this.invertYPreMultiplyAlpha(gpuTexture, width, height, format, invertY, premultiplyAlpha, faceIndex, commandEncoder);
            }
        }
        else {
            imageBitmap = imageBitmap;
            if (invertY || premultiplyAlpha) {
                var engine = EngineStore.LastCreatedEngine;
                engine && engine.createImageBitmap(imageBitmap, { imageOrientation: invertY ? "flipY" : "none", premultiplyAlpha: premultiplyAlpha ? "premultiply" : "none" }).then(function (imageBitmap) {
                    _this._device.queue.copyImageBitmapToTexture({ imageBitmap: imageBitmap }, textureCopyView, textureExtent);
                });
            }
            else {
                this._device.queue.copyImageBitmapToTexture({ imageBitmap: imageBitmap }, textureCopyView, textureExtent);
            }
            /*imageBitmap = imageBitmap as (ImageBitmap | HTMLCanvasElement | OffscreenCanvas);

            if (invertY || premultiplyAlpha) {
                // we must preprocess the image
                if (WebGPUTextureHelper._IsInternalTexture(texture) && offsetX === 0 && offsetY === 0 && width === texture.width && height === texture.height) {
                    // optimization when the source image is the same size than the destination texture and offsets X/Y == 0:
                    // we simply copy the source to the destination and we apply the preprocessing on the destination
                    this._device.queue.copyExternalImageToTexture({ source: imageBitmap }, textureCopyView, textureExtent);

                    // note that we have to use a new command encoder and submit it just right away so that the copy (see line above) and the preprocessing render pass happens in the right order!
                    // if we don't create a new command encoder, we could end up calling copyExternalImageToTexture / invertYPreMultiplyAlpha / copyExternalImageToTexture / invertYPreMultiplyAlpha in the same frame,
                    // in which case it would be executed as copyExternalImageToTexture / copyExternalImageToTexture / invertYPreMultiplyAlpha / invertYPreMultiplyAlpha because the command encoder we are passed in
                    // is submitted at the end of the frame
                    commandEncoder = this._device.createCommandEncoder({});
                    this.invertYPreMultiplyAlpha(gpuTexture, width, height, format, invertY, premultiplyAlpha, 0, commandEncoder);
                    this._device.queue.submit([commandEncoder!.finish()]);
                    commandEncoder = null as any;
                } else {
                    // we must apply the preprocessing on the source image before copying it into the destination texture
                    const useOwnCommandEncoder = commandEncoder === undefined;

                    if (useOwnCommandEncoder) {
                        commandEncoder = this._device.createCommandEncoder({});
                    }

                    // create a temp texture and copy the image to it
                    const srcTexture = this.createTexture({ width, height, layers: 1 }, false, false, false, false, false, format, 1, commandEncoder, WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.Sampled);

                    this._deferredReleaseTextures.push([srcTexture, null, null]);

                    textureExtent.depthOrArrayLayers = 1;
                    this._device.queue.copyExternalImageToTexture({ source: imageBitmap }, { texture: srcTexture }, textureExtent);
                    textureExtent.depthOrArrayLayers = layers || 1;

                    // apply the preprocessing to this temp texture
                    this.invertYPreMultiplyAlpha(srcTexture, width, height, format, invertY, premultiplyAlpha, 0, commandEncoder);

                    // copy the temp texture to the destination texture
                    commandEncoder!.copyTextureToTexture({ texture: srcTexture }, textureCopyView, textureExtent);

                    if (useOwnCommandEncoder) {
                        this._device.queue.submit([commandEncoder!.finish()]);
                        commandEncoder = null as any;
                    }
                }
            } else {
                // no preprocessing: direct copy to destination texture
                this._device.queue.copyExternalImageToTexture({ source: imageBitmap }, textureCopyView, textureExtent);
            }*/
        }
    };
    WebGPUTextureHelper.prototype.readPixels = function (texture, x, y, width, height, format, faceIndex, mipLevel, buffer) {
        if (faceIndex === void 0) { faceIndex = 0; }
        if (mipLevel === void 0) { mipLevel = 0; }
        if (buffer === void 0) { buffer = null; }
        var blockInformation = WebGPUTextureHelper._GetBlockInformationFromFormat(format);
        var bytesPerRow = Math.ceil(width / blockInformation.width) * blockInformation.length;
        var bytesPerRowAligned = Math.ceil(bytesPerRow / 256) * 256;
        var size = bytesPerRowAligned * height;
        var gpuBuffer = this._bufferManager.createRawBuffer(size, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst);
        var commandEncoder = this._device.createCommandEncoder({});
        commandEncoder.copyTextureToBuffer({
            texture: texture,
            mipLevel: mipLevel,
            origin: {
                x: x,
                y: y,
                z: Math.max(faceIndex, 0)
            }
        }, {
            buffer: gpuBuffer,
            offset: 0,
            bytesPerRow: bytesPerRowAligned
        }, {
            width: width,
            height: height,
            depthOrArrayLayers: 1
        });
        this._device.queue.submit([commandEncoder.finish()]);
        var type = WebGPUTextureHelper._GetTextureTypeFromFormat(format);
        var floatFormat = type === 1 ? 2 : type === 2 ? 1 : 0;
        return this._bufferManager.readDataFromBuffer(gpuBuffer, size, width, height, bytesPerRow, bytesPerRowAligned, floatFormat, 0, buffer);
    };
    //------------------------------------------------------------------------------
    //                              Dispose
    //------------------------------------------------------------------------------
    WebGPUTextureHelper.prototype.releaseTexture = function (texture) {
        if (WebGPUTextureHelper._IsInternalTexture(texture)) {
            var hardwareTexture = texture._hardwareTexture;
            var irradianceTexture = texture._irradianceTexture;
            var depthStencilTexture = texture._depthStencilTexture;
            // We can't destroy the objects just now because they could be used in the current frame - we delay the destroying after the end of the frame
            this._deferredReleaseTextures.push([hardwareTexture, irradianceTexture, depthStencilTexture]);
        }
        else {
            this._deferredReleaseTextures.push([texture, null, null]);
        }
    };
    WebGPUTextureHelper.prototype.destroyDeferredTextures = function () {
        for (var i = 0; i < this._deferredReleaseTextures.length; ++i) {
            var _a = this._deferredReleaseTextures[i], hardwareTexture = _a[0], irradianceTexture = _a[1], depthStencilTexture = _a[2];
            if (hardwareTexture) {
                if (WebGPUTextureHelper._IsHardwareTexture(hardwareTexture)) {
                    hardwareTexture.release();
                }
                else {
                    hardwareTexture.destroy();
                }
            }
            irradianceTexture === null || irradianceTexture === void 0 ? void 0 : irradianceTexture.dispose();
            depthStencilTexture === null || depthStencilTexture === void 0 ? void 0 : depthStencilTexture.dispose();
        }
        this._deferredReleaseTextures.length = 0;
    };
    return WebGPUTextureHelper;
}());
export { WebGPUTextureHelper };
//# sourceMappingURL=webgpuTextureHelper.js.map