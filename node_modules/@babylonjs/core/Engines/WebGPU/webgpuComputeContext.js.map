{"version":3,"file":"webgpuComputeContext.js","sourceRoot":"","sources":["../../../../sourceES6/core/Engines/WebGPU/webgpuComputeContext.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAC3C,OAAO,EAA6C,kBAAkB,EAAE,MAAM,oCAAoC,CAAC;AAEnH,OAAO,KAAK,eAAe,MAAM,mBAAmB,CAAC;AAGrD,cAAc;AACd;IA0GI,8BAAY,MAAiB,EAAE,YAAgC;QAC3D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,oBAAoB,CAAC,QAAQ,EAAE,CAAC;QAChD,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;IAtGM,4CAAa,GAApB,UAAqB,QAA4B,EAAE,eAAmC,EAAE,eAAuC;QAC3H,IAAI,CAAC,eAAe,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,qHAAqH,CAAC,CAAC;SAC1I;QACD,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/B,IAAM,gBAAgB,GAA0B,EAAE,CAAC;YACnD,KAAK,IAAM,GAAG,IAAI,QAAQ,EAAE;gBACxB,IAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,EACvB,UAAQ,GAAG,eAAe,CAAC,GAAG,CAAC,EAC/B,KAAK,GAAG,UAAQ,CAAC,KAAK,EACtB,KAAK,GAAG,UAAQ,CAAC,OAAO,EACxB,IAAI,GAAG,OAAO,CAAC,IAAI,EACnB,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;gBAE9B,IAAI,OAAO,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBACtC,IAAI,CAAC,OAAO,EAAE;oBACV,OAAO,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;iBAC1C;gBAED,QAAQ,IAAI,EAAE;oBACV,KAAK,kBAAkB,CAAC,OAAO,CAAC,CAAC;wBAC7B,IAAM,OAAO,GAAG,MAAqB,CAAC;wBACtC,IAAM,eAAe,GAAG,OAAO,CAAC,QAAS,CAAC,gBAAyC,CAAC;wBACpF,OAAO,CAAC,IAAI,CAAC;4BACT,OAAO,EAAE,KAAK,GAAG,CAAC;4BAClB,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,QAAS,CAAC;yBAC7D,CAAC,CAAC;wBACH,OAAO,CAAC,IAAI,CAAC;4BACT,OAAO,EAAE,KAAK;4BACd,QAAQ,EAAE,eAAe,CAAC,IAAK;yBAClC,CAAC,CAAC;wBACH,MAAM;qBACT;oBAED,KAAK,kBAAkB,CAAC,cAAc,CAAC,CAAC;wBACpC,IAAM,OAAO,GAAG,MAAqB,CAAC;wBACtC,IAAM,eAAe,GAAG,OAAO,CAAC,QAAS,CAAC,gBAAyC,CAAC;wBACpF,IAAI,CAAC,eAAe,CAAC,uBAAuB,GAAG,eAAe,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;4BACxF,MAAM,CAAC,KAAK,CAAC,wCAAsC,OAAO,CAAC,IAAI,mBAAc,OAAO,CAAC,QAAQ,gCAA6B,EAAE,EAAE,CAAC,CAAC;yBACnI;wBACD,OAAO,CAAC,IAAI,CAAC;4BACT,OAAO,EAAE,KAAK;4BACd,QAAQ,EAAE,eAAe,CAAC,IAAK;yBAClC,CAAC,CAAC;wBACH,MAAM;qBACT;oBAED,KAAK,kBAAkB,CAAC,aAAa,CAAC,CAAC;wBACnC,IAAM,MAAM,GAAG,MAAuB,CAAC;wBACvC,IAAM,UAAU,GAAG,MAAM,CAAC,SAAS,EAAG,CAAC;wBACvC,IAAM,YAAY,GAAG,UAAU,CAAC,kBAA+B,CAAC;wBAChE,OAAO,CAAC,IAAI,CAAC;4BACT,OAAO,EAAE,KAAK;4BACd,QAAQ,EAAE;gCACN,MAAM,EAAE,YAAY;gCACpB,MAAM,EAAE,CAAC;gCACT,IAAI,EAAE,UAAU,CAAC,QAAQ;6BAC5B;yBACJ,CAAC,CAAC;wBACH,MAAM;qBACT;oBAED,KAAK,kBAAkB,CAAC,aAAa,CAAC,CAAC;wBACnC,IAAM,MAAM,GAAG,MAAuB,CAAC;wBACvC,IAAM,UAAU,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;wBACtC,IAAM,YAAY,GAAG,UAAU,CAAC,kBAA+B,CAAC;wBAChE,OAAO,CAAC,IAAI,CAAC;4BACT,OAAO,EAAE,KAAK;4BACd,QAAQ,EAAE;gCACN,MAAM,EAAE,YAAY;gCACpB,MAAM,EAAE,CAAC;gCACT,IAAI,EAAE,UAAU,CAAC,QAAQ;6BAC5B;yBACJ,CAAC,CAAC;wBACH,MAAM;qBACT;iBACJ;aACJ;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBAC9C,IAAM,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,OAAO,EAAE;oBACV,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,SAAgB,CAAC;oBACvC,SAAS;iBACZ;gBACD,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;oBAC/C,MAAM,EAAE,eAAe,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBAC7C,OAAO,SAAA;iBACV,CAAC,CAAC;aACN;YAED,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC;SACrD;QAED,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IASM,oCAAK,GAAZ;QACI,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IAC1B,CAAC;IAlHc,6BAAQ,GAAG,CAAC,CAAC;IAmHhC,2BAAC;CAAA,AApHD,IAoHC;SApHY,oBAAoB","sourcesContent":["import { StorageBuffer } from \"../../Buffers/storageBuffer\";\r\nimport { IComputeContext } from \"../../Compute/IComputeContext\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { ComputeBindingList, ComputeBindingMapping, ComputeBindingType } from \"../Extensions/engine.computeShader\";\r\nimport { WebGPUCacheSampler } from \"./webgpuCacheSampler\";\r\nimport * as WebGPUConstants from './webgpuConstants';\r\nimport { WebGPUHardwareTexture } from \"./webgpuHardwareTexture\";\r\n\r\n/** @hidden */\r\nexport class WebGPUComputeContext implements IComputeContext {\r\n    private static _Counter = 0;\r\n\r\n    public readonly uniqueId: number;\r\n\r\n    private _device: GPUDevice;\r\n    private _cacheSampler: WebGPUCacheSampler;\r\n    private _bindGroups: GPUBindGroup[];\r\n\r\n    public getBindGroups(bindings: ComputeBindingList, computePipeline: GPUComputePipeline, bindingsMapping?: ComputeBindingMapping): GPUBindGroup[] {\r\n        if (!bindingsMapping) {\r\n            throw new Error(\"WebGPUComputeContext.getBindGroups: bindingsMapping is required until browsers support reflection for wgsl shaders!\");\r\n        }\r\n        if (this._bindGroups.length === 0) {\r\n            const bindGroupEntries: GPUBindGroupEntry[][] = [];\r\n            for (const key in bindings) {\r\n                const binding = bindings[key],\r\n                      location = bindingsMapping[key],\r\n                      group = location.group,\r\n                      index = location.binding,\r\n                      type = binding.type,\r\n                      object = binding.object;\r\n\r\n                let entries = bindGroupEntries[group];\r\n                if (!entries) {\r\n                    entries = bindGroupEntries[group] = [];\r\n                }\r\n\r\n                switch (type) {\r\n                    case ComputeBindingType.Texture: {\r\n                        const texture = object as BaseTexture;\r\n                        const hardwareTexture = texture._texture!._hardwareTexture as WebGPUHardwareTexture;\r\n                        entries.push({\r\n                            binding: index - 1,\r\n                            resource: this._cacheSampler.getSampler(texture._texture!),\r\n                        });\r\n                        entries.push({\r\n                            binding: index,\r\n                            resource: hardwareTexture.view!,\r\n                        });\r\n                        break;\r\n                    }\r\n\r\n                    case ComputeBindingType.StorageTexture: {\r\n                        const texture = object as BaseTexture;\r\n                        const hardwareTexture = texture._texture!._hardwareTexture as WebGPUHardwareTexture;\r\n                        if ((hardwareTexture.textureAdditionalUsages & WebGPUConstants.TextureUsage.Storage) === 0) {\r\n                            Logger.Error(`computeDispatch: The texture (name=${texture.name}, uniqueId=${texture.uniqueId}) is not a storage texture!`, 50);\r\n                        }\r\n                        entries.push({\r\n                            binding: index,\r\n                            resource: hardwareTexture.view!,\r\n                        });\r\n                        break;\r\n                    }\r\n\r\n                    case ComputeBindingType.UniformBuffer: {\r\n                        const buffer = object as UniformBuffer;\r\n                        const dataBuffer = buffer.getBuffer()!;\r\n                        const webgpuBuffer = dataBuffer.underlyingResource as GPUBuffer;\r\n                        entries.push({\r\n                            binding: index,\r\n                            resource: {\r\n                                buffer: webgpuBuffer,\r\n                                offset: 0,\r\n                                size: dataBuffer.capacity,\r\n                            }\r\n                        });\r\n                        break;\r\n                    }\r\n\r\n                    case ComputeBindingType.StorageBuffer: {\r\n                        const buffer = object as StorageBuffer;\r\n                        const dataBuffer = buffer.getBuffer();\r\n                        const webgpuBuffer = dataBuffer.underlyingResource as GPUBuffer;\r\n                        entries.push({\r\n                            binding: index,\r\n                            resource: {\r\n                                buffer: webgpuBuffer,\r\n                                offset: 0,\r\n                                size: dataBuffer.capacity,\r\n                            }\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < bindGroupEntries.length; ++i) {\r\n                const entries = bindGroupEntries[i];\r\n                if (!entries) {\r\n                    this._bindGroups[i] = undefined as any;\r\n                    continue;\r\n                }\r\n                this._bindGroups[i] = this._device.createBindGroup({\r\n                    layout: computePipeline.getBindGroupLayout(i),\r\n                    entries,\r\n                });\r\n            }\r\n\r\n            this._bindGroups.length = bindGroupEntries.length;\r\n        }\r\n\r\n        return this._bindGroups;\r\n    }\r\n\r\n    constructor(device: GPUDevice, cacheSampler: WebGPUCacheSampler) {\r\n        this._device = device;\r\n        this._cacheSampler = cacheSampler;\r\n        this.uniqueId = WebGPUComputeContext._Counter++;\r\n        this.clear();\r\n    }\r\n\r\n    public clear(): void {\r\n        this._bindGroups = [];\r\n    }\r\n}"]}