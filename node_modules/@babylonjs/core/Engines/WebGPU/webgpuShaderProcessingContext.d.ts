import { ShaderProcessingContext } from "../Processors/shaderProcessingOptions";
/** @hidden */
export interface WebGPUBindingInfo {
    setIndex: number;
    bindingIndex: number;
}
/** @hidden */
export interface WebGPUTextureSamplerBindingDescription {
    sampler: WebGPUBindingInfo;
    isTextureArray: boolean;
    textures: Array<WebGPUBindingInfo>;
}
/** @hidden
 *  If the binding is a UBO, isSampler=isTexture=false
*/
export interface WebGPUBindingDescription {
    name: string;
    usedInVertex: boolean;
    usedInFragment: boolean;
    isSampler: boolean;
    isComparisonSampler?: boolean;
    isTexture: boolean;
    sampleType?: GPUTextureSampleType;
    textureDimension?: GPUTextureViewDimension;
}
/**
 * @hidden
 */
export declare class WebGPUShaderProcessingContext implements ShaderProcessingContext {
    uboNextBindingIndex: number;
    freeSetIndex: number;
    freeBindingIndex: number;
    availableVaryings: {
        [key: string]: number;
    };
    availableAttributes: {
        [key: string]: number;
    };
    availableUBOs: {
        [key: string]: {
            setIndex: number;
            bindingIndex: number;
        };
    };
    availableSamplers: {
        [key: string]: WebGPUTextureSamplerBindingDescription;
    };
    leftOverUniforms: {
        name: string;
        type: string;
        length: number;
    }[];
    orderedAttributes: string[];
    orderedUBOsAndSamplers: WebGPUBindingDescription[][];
    uniformBufferNames: string[];
    samplerNames: string[];
    attributeNamesFromEffect: string[];
    attributeLocationsFromEffect: number[];
    private _attributeNextLocation;
    private _varyingNextLocation;
    constructor();
    getAttributeNextLocation(dataType: string, arrayLength?: number): number;
    getVaryingNextLocation(dataType: string, arrayLength?: number): number;
    getNextFreeUBOBinding(): {
        setIndex: number;
        bindingIndex: number;
    };
    private _getNextFreeBinding;
}
