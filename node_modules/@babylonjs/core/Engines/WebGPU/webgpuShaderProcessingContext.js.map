{"version":3,"file":"webgpuShaderProcessingContext.js","sourceRoot":"","sources":["../../../../sourceES6/core/Engines/WebGPU/webgpuShaderProcessingContext.ts"],"names":[],"mappings":"AAEA,IAAM,QAAQ,GAAG,CAAC,CAAC;AACnB,IAAM,kBAAkB,GAAG,EAAE,CAAC;AAE9B,yDAAyD;AACzD,IAAM,wBAAwB,GAA8B;IACxD,MAAM,EAAE,CAAC;IACT,MAAM,EAAE,CAAC;IACT,MAAM,EAAE,CAAC;CACZ,CAAC;AA+BF;;GAEG;AACH;IAsBI;QACI,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC;QAChC,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAE1B,IAAI,CAAC,iBAAiB,GAAG,EAAG,CAAC;QAC7B,IAAI,CAAC,mBAAmB,GAAG,EAAG,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,EAAG,CAAC;QACzB,IAAI,CAAC,iBAAiB,GAAG,EAAG,CAAC;QAE7B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC/B,CAAC;IAEM,gEAAwB,GAA/B,UAAgC,QAAgB,EAAE,WAAuB;;QAAvB,4BAAA,EAAA,eAAuB;QACrE,IAAM,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC;QAE1C,IAAI,CAAC,sBAAsB,IAAI,CAAC,MAAA,wBAAwB,CAAC,QAAQ,CAAC,mCAAI,CAAC,CAAC,GAAG,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;QAE9F,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,8DAAsB,GAA7B,UAA8B,QAAgB,EAAE,WAAuB;;QAAvB,4BAAA,EAAA,eAAuB;QACnE,IAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC;QAExC,IAAI,CAAC,oBAAoB,IAAI,CAAC,MAAA,wBAAwB,CAAC,QAAQ,CAAC,mCAAI,CAAC,CAAC,GAAG,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;QAE5F,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,6DAAqB,GAA5B;QACI,OAAO,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC;IAEO,2DAAmB,GAA3B,UAA4B,YAAoB;QAC5C,IAAI,IAAI,CAAC,gBAAgB,GAAG,kBAAkB,GAAG,YAAY,EAAE;YAC3D,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;SAC7B;QAED,IAAI,IAAI,CAAC,YAAY,KAAK,QAAQ,EAAE;YAChC,MAAM,iFAAiF,CAAC;SAC3F;QAED,IAAM,WAAW,GAAG;YAChB,QAAQ,EAAE,IAAI,CAAC,YAAY;YAC3B,YAAY,EAAE,IAAI,CAAC,gBAAgB;SACtC,CAAC;QAEF,IAAI,CAAC,gBAAgB,IAAI,YAAY,CAAC;QAEtC,OAAO,WAAW,CAAC;IACvB,CAAC;IACL,oCAAC;AAAD,CAAC,AA/ED,IA+EC","sourcesContent":["import { ShaderProcessingContext } from \"../Processors/shaderProcessingOptions\";\n\nconst _maxSets = 4;\nconst _maxBindingsPerSet = 16;\n\n// all types not listed are assumed to consume 1 location\nconst _webGLTypeToLocationSize: { [key: string]: number } = {\n    \"mat2\": 2,\n    \"mat3\": 3,\n    \"mat4\": 4,\n};\n\n/** @hidden */\nexport interface WebGPUBindingInfo {\n    setIndex: number;\n    bindingIndex: number;\n}\n\n/** @hidden */\nexport interface WebGPUTextureSamplerBindingDescription {\n    sampler: WebGPUBindingInfo;\n    isTextureArray: boolean;\n    textures: Array<WebGPUBindingInfo>;\n}\n\n/** @hidden\n *  If the binding is a UBO, isSampler=isTexture=false\n*/\nexport interface WebGPUBindingDescription {\n    name: string;\n    usedInVertex: boolean;\n    usedInFragment: boolean;\n\n    isSampler: boolean;\n    isComparisonSampler?: boolean;\n\n    isTexture: boolean;\n    sampleType?: GPUTextureSampleType;\n    textureDimension?: GPUTextureViewDimension;\n}\n\n/**\n * @hidden\n */\nexport class WebGPUShaderProcessingContext implements ShaderProcessingContext {\n    public uboNextBindingIndex: number;\n    public freeSetIndex: number;\n    public freeBindingIndex: number;\n\n    public availableVaryings: { [key: string]: number };\n    public availableAttributes: { [key: string]: number };\n    public availableUBOs: { [key: string]: { setIndex: number, bindingIndex: number} };\n    public availableSamplers: { [key: string]: WebGPUTextureSamplerBindingDescription };\n\n    public leftOverUniforms: { name: string, type: string, length: number }[];\n\n    public orderedAttributes: string[];\n    public orderedUBOsAndSamplers: WebGPUBindingDescription[][];\n    public uniformBufferNames: string[];\n    public samplerNames: string[]; // list of all sampler names used in the shader\n    public attributeNamesFromEffect: string[];\n    public attributeLocationsFromEffect: number[];\n\n    private _attributeNextLocation: number;\n    private _varyingNextLocation: number;\n\n    constructor() {\n        this._attributeNextLocation = 0;\n        this._varyingNextLocation = 0;\n        this.freeSetIndex = 2;\n        this.freeBindingIndex = 0;\n\n        this.availableVaryings = { };\n        this.availableAttributes = { };\n        this.availableUBOs = { };\n        this.availableSamplers = { };\n\n        this.orderedAttributes = [];\n        this.orderedUBOsAndSamplers = [];\n        this.uniformBufferNames = [];\n\n        this.leftOverUniforms = [];\n    }\n\n    public getAttributeNextLocation(dataType: string, arrayLength: number = 0): number {\n        const index = this._attributeNextLocation;\n\n        this._attributeNextLocation += (_webGLTypeToLocationSize[dataType] ?? 1) * (arrayLength || 1);\n\n        return index;\n    }\n\n    public getVaryingNextLocation(dataType: string, arrayLength: number = 0): number {\n        const index = this._varyingNextLocation;\n\n        this._varyingNextLocation += (_webGLTypeToLocationSize[dataType] ?? 1) * (arrayLength || 1);\n\n        return index;\n    }\n\n    public getNextFreeUBOBinding() {\n        return this._getNextFreeBinding(1);\n    }\n\n    private _getNextFreeBinding(bindingCount: number) {\n        if (this.freeBindingIndex > _maxBindingsPerSet - bindingCount) {\n            this.freeSetIndex++;\n            this.freeBindingIndex = 0;\n        }\n\n        if (this.freeSetIndex === _maxSets) {\n            throw \"Too many textures or UBOs have been declared and it is not supported in WebGPU.\";\n        }\n\n        const returnValue = {\n            setIndex: this.freeSetIndex,\n            bindingIndex: this.freeBindingIndex\n        };\n\n        this.freeBindingIndex += bindingCount;\n\n        return returnValue;\n    }\n}"]}