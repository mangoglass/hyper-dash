{"version":3,"file":"webgpuBufferManager.js","sourceRoot":"","sources":["../../../../sourceES6/core/Engines/WebGPU/webgpuBufferManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataBuffer } from '../../Buffers/dataBuffer';\r\nimport { WebGPUDataBuffer } from '../../Meshes/WebGPU/webgpuDataBuffer';\r\nimport { Nullable } from '../../types';\r\nimport * as WebGPUConstants from './webgpuConstants';\r\n\r\n/** @hidden */\r\nexport class WebGPUBufferManager {\r\n\r\n    private _device: GPUDevice;\r\n    private _deferredReleaseBuffers: Array<GPUBuffer> = [];\r\n\r\n    private static _IsGPUBuffer(buffer: DataBuffer | GPUBuffer): buffer is GPUBuffer {\r\n        return (buffer as DataBuffer).underlyingResource === undefined;\r\n    }\r\n\r\n    constructor(device: GPUDevice) {\r\n        this._device = device;\r\n    }\r\n\r\n    public createRawBuffer(viewOrSize: ArrayBufferView | number, flags: GPUBufferUsageFlags, mappedAtCreation = false): GPUBuffer {\r\n        const alignedLength = (viewOrSize as ArrayBufferView).byteLength !== undefined ? ((viewOrSize as ArrayBufferView).byteLength + 3) & ~3 : ((viewOrSize as number) + 3) & ~3; // 4 bytes alignments (because of the upload which requires this)\r\n        const verticesBufferDescriptor = {\r\n            mappedAtCreation,\r\n            size: alignedLength,\r\n            usage: flags\r\n        };\r\n\r\n        return this._device.createBuffer(verticesBufferDescriptor);\r\n    }\r\n\r\n    public createBuffer(viewOrSize: ArrayBufferView | number, flags: GPUBufferUsageFlags): DataBuffer {\r\n        const isView = (viewOrSize as ArrayBufferView).byteLength !== undefined;\r\n        const buffer = this.createRawBuffer(viewOrSize, flags);\r\n        const dataBuffer = new WebGPUDataBuffer(buffer);\r\n        dataBuffer.references = 1;\r\n        dataBuffer.capacity = isView ? (viewOrSize as ArrayBufferView).byteLength : viewOrSize as number;\r\n\r\n        if (isView) {\r\n            this.setSubData(dataBuffer, 0, viewOrSize as ArrayBufferView);\r\n        }\r\n\r\n        return dataBuffer;\r\n    }\r\n\r\n    public setSubData(dataBuffer: WebGPUDataBuffer, dstByteOffset: number, src: ArrayBufferView, srcByteOffset = 0, byteLength = 0): void {\r\n        const buffer = dataBuffer.underlyingResource as GPUBuffer;\r\n\r\n        byteLength = byteLength || src.byteLength;\r\n        byteLength = Math.min(byteLength, dataBuffer.capacity - dstByteOffset);\r\n\r\n        // After Migration to Canary\r\n        let chunkStart = src.byteOffset + srcByteOffset;\r\n        let chunkEnd = chunkStart + byteLength;\r\n\r\n        // 4 bytes alignments for upload\r\n        const alignedLength = (byteLength + 3) & ~3;\r\n        if (alignedLength !== byteLength) {\r\n            const tempView = new Uint8Array(src.buffer.slice(chunkStart, chunkEnd));\r\n            src = new Uint8Array(alignedLength);\r\n            (src as Uint8Array).set(tempView);\r\n            srcByteOffset = 0;\r\n            chunkStart = 0;\r\n            chunkEnd = alignedLength;\r\n            byteLength = alignedLength;\r\n        }\r\n\r\n        // Chunk\r\n        const maxChunk = 1024 * 1024 * 15;\r\n        let offset = 0;\r\n        while ((chunkEnd - (chunkStart + offset)) > maxChunk) {\r\n            this._device.queue.writeBuffer(buffer, dstByteOffset + offset, src.buffer, chunkStart + offset, maxChunk);\r\n            offset += maxChunk;\r\n        }\r\n\r\n        this._device.queue.writeBuffer(buffer, dstByteOffset + offset, src.buffer, chunkStart + offset, byteLength - offset);\r\n    }\r\n\r\n    private _FromHalfFloat(value: number): number {\r\n        const s = (value & 0x8000) >> 15;\r\n        const e = (value & 0x7C00) >> 10;\r\n        const f = value & 0x03FF;\r\n\r\n        if (e === 0) {\r\n            return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10));\r\n        } else if (e == 0x1F) {\r\n            return f ? NaN : ((s ? -1 : 1) * Infinity);\r\n        }\r\n\r\n        return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + (f / Math.pow(2, 10)));\r\n    }\r\n\r\n    private _GetHalfFloatAsFloatRGBAArrayBuffer(dataLength: number, arrayBuffer: ArrayBuffer, destArray?: Float32Array): Float32Array {\r\n        if (!destArray) {\r\n            destArray = new Float32Array(dataLength);\r\n        }\r\n        const srcData = new Uint16Array(arrayBuffer);\r\n        while (dataLength--) {\r\n            destArray[dataLength] = this._FromHalfFloat(srcData[dataLength]);\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    public readDataFromBuffer(gpuBuffer: GPUBuffer, size: number, width: number, height: number, bytesPerRow: number, bytesPerRowAligned: number, floatFormat = 0, offset = 0, buffer: Nullable<ArrayBufferView> = null, destroyBuffer = true): Promise<ArrayBufferView> {\r\n        return new Promise((resolve, reject) => {\r\n            gpuBuffer.mapAsync(WebGPUConstants.MapMode.Read, offset, size).then(() => {\r\n                const copyArrayBuffer = gpuBuffer.getMappedRange(offset, size);\r\n                let data: Nullable<ArrayBufferView> | Uint8Array | Float32Array = buffer;\r\n                if (data === null) {\r\n                    switch (floatFormat) {\r\n                        case 0: // byte format\r\n                            data = new Uint8Array(size);\r\n                            (data as Uint8Array).set(new Uint8Array(copyArrayBuffer));\r\n                            break;\r\n                        case 1: // half float\r\n                            // TODO WEBGPU use computer shaders (or render pass) to make the conversion?\r\n                            data = this._GetHalfFloatAsFloatRGBAArrayBuffer(size / 2, copyArrayBuffer);\r\n                            break;\r\n                        case 2: // float\r\n                            data = new Float32Array(size / 4);\r\n                            (data as Float32Array).set(new Float32Array(copyArrayBuffer));\r\n                            break;\r\n                    }\r\n                } else {\r\n                    switch (floatFormat) {\r\n                        case 0: // byte format\r\n                            data = new Uint8Array(data.buffer);\r\n                            (data as Uint8Array).set(new Uint8Array(copyArrayBuffer));\r\n                            break;\r\n                        case 1: // half float\r\n                            // TODO WEBGPU use computer shaders (or render pass) to make the conversion?\r\n                            data = this._GetHalfFloatAsFloatRGBAArrayBuffer(size / 2, copyArrayBuffer, buffer as Float32Array);\r\n                            break;\r\n                        case 2: // float\r\n                            data = new Float32Array(data.buffer);\r\n                            (data as Float32Array).set(new Float32Array(copyArrayBuffer));\r\n                            break;\r\n                    }\r\n                }\r\n                if (bytesPerRow !== bytesPerRowAligned) {\r\n                    // TODO WEBGPU use computer shaders (or render pass) to build the final buffer data?\r\n                    if (floatFormat === 1) {\r\n                        // half float have been converted to float above\r\n                        bytesPerRow *= 2;\r\n                        bytesPerRowAligned *= 2;\r\n                    }\r\n                    const data2 = new Uint8Array(data!.buffer);\r\n                    let offset = bytesPerRow, offset2 = 0;\r\n                    for (let y = 1; y < height; ++y) {\r\n                        offset2 = y * bytesPerRowAligned;\r\n                        for (let x = 0; x < bytesPerRow; ++x) {\r\n                            data2[offset++] = data2[offset2++];\r\n                        }\r\n                    }\r\n                    if (floatFormat !== 0) {\r\n                        data = new Float32Array(data2.buffer, 0, offset / 4);\r\n                    } else {\r\n                        data = new Uint8Array(data2.buffer, 0, offset);\r\n                    }\r\n                }\r\n                gpuBuffer.unmap();\r\n                if (destroyBuffer) {\r\n                    this.releaseBuffer(gpuBuffer);\r\n                }\r\n                resolve(data!);\r\n            }, (reason) => reject(reason));\r\n        });\r\n    }\r\n\r\n    public releaseBuffer(buffer: DataBuffer | GPUBuffer): boolean {\r\n        if (WebGPUBufferManager._IsGPUBuffer(buffer)) {\r\n            this._deferredReleaseBuffers.push(buffer);\r\n            return true;\r\n        }\r\n\r\n        buffer.references--;\r\n\r\n        if (buffer.references === 0) {\r\n            this._deferredReleaseBuffers.push(buffer.underlyingResource as GPUBuffer);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public destroyDeferredBuffers(): void {\r\n        for (let i = 0; i < this._deferredReleaseBuffers.length; ++i) {\r\n            this._deferredReleaseBuffers[i].destroy();\r\n        }\r\n\r\n        this._deferredReleaseBuffers.length = 0;\r\n   }\r\n}"]}