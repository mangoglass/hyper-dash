{"version":3,"file":"deviceInputSystem.js","sourceRoot":"","sources":["../../../sourceES6/core/DeviceInput/deviceInputSystem.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,wBAAwB,EAAE,MAAM,4CAA4C,CAAC;AACtF,OAAO,EAAE,oBAAoB,EAAE,MAAM,wCAAwC,CAAC;AAM9E;;;;;GAKG;AACH;IAAA;IAcA,CAAC;IAbG;;;;OAIG;IACW,wBAAM,GAApB,UAAqB,MAAc;QAC/B,0GAA0G;QAC1G,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;YAC3B,MAAM,CAAC,iBAAiB,GAAG,CAAC,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,wBAAwB,CAAC,IAAI,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,oBAAoB,CAAC,MAAM,CAAC,CAAC;SACrM;QAED,OAAO,MAAM,CAAC,iBAAiB,CAAC;IACpC,CAAC;IACL,wBAAC;AAAD,CAAC,AAdD,IAcC","sourcesContent":["import { Engine } from '../Engines/engine';\r\nimport { NativeDeviceInputWrapper } from './Implementations/nativeDeviceInputWrapper';\r\nimport { WebDeviceInputSystem } from './Implementations/webDeviceInputSystem';\r\nimport { IDeviceInputSystem } from './Interfaces/inputInterfaces';\r\n\r\n/** @hidden */\r\ndeclare const _native: any;\r\n\r\n/**\r\n * This class will take all inputs from Keyboard, Pointer, and\r\n * any Gamepads and provide a polling system that all devices\r\n * will use.  This class assumes that there will only be one\r\n * pointer device and one keyboard.\r\n */\r\nexport class DeviceInputSystem {\r\n    /**\r\n     * Creates a new DeviceInputSystem instance or returns existing one in engine\r\n     * @param engine Engine to assign input system to\r\n     * @returns The new instance\r\n     */\r\n    public static Create(engine: Engine): IDeviceInputSystem {\r\n        // If running in Babylon Native, then defer to the native input system, which has the same public contract\r\n        if (!engine.deviceInputSystem) {\r\n            engine.deviceInputSystem = (typeof _native !== 'undefined' && _native.DeviceInputSystem) ? new NativeDeviceInputWrapper(new _native.DeviceInputSystem(engine)) : new WebDeviceInputSystem(engine);\r\n        }\r\n\r\n        return engine.deviceInputSystem;\r\n    }\r\n}\r\n"]}