{"version":3,"file":"copyTools.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/copyTools.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISize } from \"../Maths/math.size\";\nimport { Nullable } from \"../types\";\n\ndeclare type BaseTexture = import(\"../Materials/Textures/baseTexture\").BaseTexture;\n\n/**\n * Class used to host copy specific utilities\n */\nexport class CopyTools {\n    /**\n     * Transform some pixel data to a base64 string\n     * @param pixels defines the pixel data to transform to base64\n     * @param size defines the width and height of the (texture) data\n     * @param invertY true if the data must be inverted for the Y coordinate during the conversion\n     * @returns The base64 encoded string or null\n     */\n    public static GenerateBase64StringFromPixelData(pixels: ArrayBufferView, size: ISize, invertY = false): Nullable<string> {\n        var width = size.width;\n        var height = size.height;\n\n        if (pixels instanceof Float32Array) {\n            var len = pixels.byteLength / pixels.BYTES_PER_ELEMENT;\n            var npixels = new Uint8Array(len);\n\n            while (--len >= 0) {\n                var val = pixels[len];\n                if (val < 0) {\n                    val = 0;\n                } else if (val > 1) {\n                    val = 1;\n                }\n                npixels[len] = val * 255;\n            }\n\n            pixels = npixels;\n        }\n\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n\n        var ctx = canvas.getContext('2d');\n        if (!ctx) {\n            return null;\n        }\n\n        var imageData = ctx.createImageData(width, height);\n        var castData = <any>imageData.data;\n        castData.set(pixels);\n        ctx.putImageData(imageData, 0, 0);\n\n        if (invertY) {\n            var canvas2 = document.createElement('canvas');\n            canvas2.width = width;\n            canvas2.height = height;\n\n            var ctx2 = canvas2.getContext('2d');\n            if (!ctx2) {\n                return null;\n            }\n\n            ctx2.translate(0, height);\n            ctx2.scale(1, -1);\n            ctx2.drawImage(canvas, 0, 0);\n\n            return canvas2.toDataURL('image/png');\n        }\n\n        return canvas.toDataURL('image/png');\n    }\n\n    /**\n     * Reads the pixels stored in the webgl texture and returns them as a base64 string\n     * @param texture defines the texture to read pixels from\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n     * @returns The base64 encoded string or null\n     */\n    public static GenerateBase64StringFromTexture(texture: BaseTexture, faceIndex = 0, level = 0): Nullable<string> {\n        var internalTexture = texture.getInternalTexture();\n        if (!internalTexture) {\n            return null;\n        }\n\n        var pixels = texture._readPixelsSync(faceIndex, level);\n        if (!pixels) {\n            return null;\n        }\n\n        return CopyTools.GenerateBase64StringFromPixelData(pixels, texture.getSize(), internalTexture.invertY);\n    }\n\n    /**\n     * Reads the pixels stored in the webgl texture and returns them as a base64 string\n     * @param texture defines the texture to read pixels from\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n     * @returns The base64 encoded string or null wrapped in a promise\n     */\n    public static async GenerateBase64StringFromTextureAsync(texture: BaseTexture, faceIndex = 0, level = 0): Promise<Nullable<string>> {\n        var internalTexture = texture.getInternalTexture();\n        if (!internalTexture) {\n            return null;\n        }\n\n        var pixels = await texture.readPixels(faceIndex, level);\n        if (!pixels) {\n            return null;\n        }\n\n        return CopyTools.GenerateBase64StringFromPixelData(pixels, texture.getSize(), internalTexture.invertY);\n    }\n}\n"]}