{"version":3,"file":"focusableButton.js","sourceRoot":"","sources":["../../../../sourceES6/gui/src/2D/controls/focusableButton.ts"],"names":[],"mappings":";AAGA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,OAAO,EAAE,UAAU,EAAE,MAAM,gCAAgC,CAAC;AAG5D,OAAO,EAAE,UAAU,EAAE,MAAM,iCAAiC,CAAC;AAG7D;;GAEG;AACH;IAAqC,mCAAM;IAavC,yBAAmB,IAAa;QAAhC,YACI,kBAAM,IAAI,CAAC,SAGd;QAJkB,UAAI,GAAJ,IAAI,CAAS;QAZhC,6CAA6C;QACtC,kBAAY,GAAqB,IAAI,CAAC;QACrC,gBAAU,GAAG,KAAK,CAAC;QACnB,qBAAe,GAAqB,IAAI,CAAC;QAEjD,wDAAwD;QACjD,uBAAiB,GAAG,IAAI,UAAU,EAAU,CAAC;QACpD,yDAAyD;QAClD,sBAAgB,GAAG,IAAI,UAAU,EAAU,CAAC;QACnD,uDAAuD;QAChD,wCAAkC,GAAG,IAAI,UAAU,EAAkB,CAAC;QAKzE,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,KAAK,CAAC;;IACtC,CAAC;IAED,cAAc;IACP,gCAAM,GAAb;QACI,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,EAAE;gBACnD,0CAA0C;gBAC1C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC;aACrC;YACD,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;SAC/C;IACL,CAAC;IAED,cAAc;IACP,iCAAO,GAAd;QACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,2BAA2B;YAC3B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC;YAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;SAClC;QACD,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IAED;;;OAGG;IACI,wCAAc,GAArB;QACI,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,+BAAK,GAAZ;QACI,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACI,8BAAI,GAAX;QACI,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;IACrC,CAAC;IAED;;;OAGG;IACI,yCAAe,GAAtB,UAAuB,GAAmB;QACtC,IAAI,CAAC,kCAAkC,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAC3E,CAAC;IAED,cAAc;IACP,wCAAc,GAArB,UAAsB,MAAe,EAAE,WAAoB,EAAE,SAAiB,EAAE,WAAmB,EAAE,EAAmB;QACpH,kCAAkC;QAClC,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,OAAO,iBAAM,cAAc,YAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;IACjF,CAAC;IAED,cAAc;IACP,kCAAQ,GAAf;QACI,iBAAM,OAAO,WAAE,CAAC;QAEhB,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;QAC/B,IAAI,CAAC,kCAAkC,CAAC,KAAK,EAAE,CAAC;IACpD,CAAC;IACL,sBAAC;AAAD,CAAC,AAzFD,CAAqC,MAAM,GAyF1C;;AACD,UAAU,CAAC,eAAe,CAAC,6BAA6B,CAAC,GAAG,eAAe,CAAC","sourcesContent":["import { Nullable } from \"@babylonjs/core/types\";\nimport { Vector2 } from \"@babylonjs/core/Maths/math.vector\";\n\nimport { Button } from \"./button\";\nimport { Control } from \"./control\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\nimport { PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';\nimport { IFocusableControl } from \"./focusableControl\";\nimport { Observable } from '@babylonjs/core/Misc/observable';\nimport { IKeyboardEvent } from \"@babylonjs/core/Events/deviceInputEvents\";\n\n/**\n * Class used to create a focusable button that can easily handle keyboard events\n */\nexport class FocusableButton extends Button implements IFocusableControl {\n    /** Highlight color when button is focused */\n    public focusedColor: Nullable<string> = null;\n    private _isFocused = false;\n    private _unfocusedColor: Nullable<string> = null;\n\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<Button>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<Button>();\n    /** Observable raised when a key event was processed */\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\n\n    constructor(public name?: string) {\n        super(name);\n\n        this._unfocusedColor = this.color;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        if (this._isFocused) {\n            this._isFocused = false;\n            if (this.focusedColor && this._unfocusedColor != null) {\n                // Set color back to saved unfocused color\n                this.color = this._unfocusedColor;\n            }\n            this.onBlurObservable.notifyObservers(this);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        this._isFocused = true;\n\n        if (this.focusedColor) {\n            // Save the unfocused color\n            this._unfocusedColor = this.color;\n            this.color = this.focusedColor;\n        }\n        this.onFocusObservable.notifyObservers(this);\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        return null;\n    }\n\n    /**\n     * Function to focus a button programmatically\n     */\n    public focus() {\n        this._host.moveFocusToControl(this);\n    }\n\n    /**\n     * Function to unfocus a button programmatically\n     */\n    public blur() {\n        this._host.focusedControl = null;\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: IKeyboardEvent): void {\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);\n    }\n\n    /** @hidden */\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\n        // Clicking on button should focus\n        this.focus();\n\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\n    }\n\n    /** @hidden */\n    public displose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onKeyboardEventProcessedObservable.clear();\n    }\n}\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.FocusableButton\"] = FocusableButton;"]}