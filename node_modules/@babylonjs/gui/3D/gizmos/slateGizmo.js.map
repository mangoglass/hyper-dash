{"version":3,"file":"slateGizmo.js","sourceRoot":"","sources":["../../../../sourceES6/gui/src/3D/gizmos/slateGizmo.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,8BAA8B,CAAC;AACrD,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,mCAAmC,CAAC;AAE5F,OAAO,EAAE,aAAa,EAAE,MAAM,sCAAsC,CAAC;AAErE,OAAO,EAAE,UAAU,EAAE,MAAM,iCAAiC,CAAC;AAK7D,OAAO,EAAE,YAAY,EAAe,UAAU,EAAE,MAAM,eAAe,CAAC;AAStE;;GAEG;AACH;IAAgC,8BAAK;IAuEjC,oBAAY,YAAmC;QAA/C,YACI,kBAAM,YAAY,CAAC,SAItB;QA3EO,yBAAmB,GAAG,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAG3C,oBAAc,GAAG,IAAI,UAAU,EAAE,CAAC;QAClC,gBAAU,GAAG,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAE1C,yBAAyB;QACjB,cAAQ,GAAmB,EAAE,CAAC;QACtC,mCAAmC;QAC3B,YAAM,GAAiB,EAAE,CAAC;QAK1B,uBAAiB,GAAG;YACxB,GAAG,EAAE,IAAI,OAAO,EAAE;YAClB,GAAG,EAAE,IAAI,OAAO,EAAE;SACrB,CAAC;QAEF;;WAEG;QACK,aAAO,GAAG,IAAI,CAAC;QACf,oBAAc,GAA+B,IAAI,CAAC;QAC1D;;WAEG;QACI,qBAAe,GAAG,KAAK,CAAC;QAC/B;;WAEG;QACI,mCAA6B,GAAG,EAAE,CAAC;QAE1C;;WAEG;QACI,gBAAU,GAAG,IAAI,CAAC;QAqCrB,KAAI,CAAC,WAAW,EAAE,CAAC;QACnB,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;;IAC7B,CAAC;IAlCD,sBAAW,qCAAa;aAyBxB;YACI,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;QA9BD;;WAEG;aACH,UAAyB,OAAmC;YAA5D,iBAuBC;YAtBG,IAAI,OAAO,EAAE;gBACT,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC;gBACjC,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAEzB,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAC,UAAU;oBACzE,IAAI,KAAI,CAAC,cAAc,IAAI,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,KAAK,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;wBACxF,KAAI,CAAC,cAAc,CAAC,KAAK,GAAG,KAAK,CAAC;wBAClC,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;qBAC9B;oBAED,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,iBAAiB,IAAI,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,EAAE;wBACtH,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAqB,CAAC;wBACzE,IAAI,MAAM,CAAC,KAAK,KAAK,KAAI,EAAE;4BACvB,KAAI,CAAC,cAAc,GAAG,MAAM,CAAC;4BAC7B,KAAI,CAAC,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC;yBACpC;qBACJ;gBACL,CAAC,CAAC,CAAC;aACN;iBAAM,IAAI,IAAI,CAAC,cAAc,EAAE;gBAC5B,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;aACnF;YACD,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;QAClC,CAAC;;;OAAA;IAaO,gCAAW,GAAnB;QAAA,iBA+CC;QA9CG,IAAI,CAAC,cAAc,GAAG,IAAI,aAAa,CAAC,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;QAC5F,IAAI,CAAC,cAAc,CAAC,kBAAkB,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;QAE/D,IAAM,YAAY,GAAG;YACjB;gBACI,UAAU,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;gBAClC,MAAM,EAAE,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aAC/B;YACD;gBACI,UAAU,EAAE,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;gBACjC,MAAM,EAAE,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aAC/B;YACD;gBACI,UAAU,EAAE,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBAChC,MAAM,EAAE,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aAC/B;YACD;gBACI,UAAU,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACjC,MAAM,EAAE,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aAC/B;SACJ,CAAC;QAEF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxB,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;YACzE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;YAC3C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE5C,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC;YACzC,IAAI,CAAC,0BAA0B,CAC3B,MAAM,EACN,UAAC,WAAoB,EAAE,eAAwB,EAAE,MAAe,EAAE,KAAkB,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,EAAnE,CAAmE,EAC5J,YAAY,CAAC,CAAC,CAAC,CAClB,CAAC;SACL;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxB,IAAM,IAAI,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;YACrE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;YACzC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YACpF,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC;YACvC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAClG;QAED,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;IAChD,CAAC;IAEO,qCAAgB,GAAxB,UAAyB,MAAe,EAAE,WAAmB,EAAE,cAA+B;QAA/B,+BAAA,EAAA,sBAA+B;QAC1F,IAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACnD,IAAI,cAAc,EAAE;YAChB,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SAChB;QACD,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAC5C,CAAC;IAEO,qCAAgB,GAAxB,UAAyB,MAAe,EAAE,UAAmB,EAAE,IAAa,EAAE,eAAgC;QAAhC,gCAAA,EAAA,uBAAgC;QAC1G,IAAM,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAE9C,IAAM,iBAAiB,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChD,iBAAiB,CAAC,cAAc,CAC5B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAe,CAAC,aAAa,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EACvE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAe,CAAC,aAAa,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EACvE,CAAC,CACJ,CAAC;QAEF,8DAA8D;QAC9D,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAE/D,IAAI,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxB,IAAI,eAAe,EAAE;YACjB,sGAAsG;YACtG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAChH,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;SACvB;QAED,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IAEO,gCAAW,GAAnB,UAAoB,WAAoB,EAAE,eAAwB,EAAE,MAAe,EAAE,KAAkB,EAAE,QAAiB;QACtH,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACtB,OAAO;SACV;QAED,IAAI,QAAQ,EAAE;YACV,IAAM,WAAW,GAAG,eAAe,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,WAAW,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC3F;QACD,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,eAAe,EAAE,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAE3E,IAAM,kBAAkB,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjD,IAAM,sBAAsB,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACrD,kBAAkB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAClE,sBAAsB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAE1E,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QAChF,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;QAC5F,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;IACjF,CAAC;IAEO,+CAA0B,GAAlC,UACI,MAAmB,EACnB,MAAqG,EACrG,KAAkB;QAHtB,iBAiEC;QA5DG,IAAM,eAAe,GAAG,IAAI,OAAO,EAAE,CAAC;QACtC,IAAM,WAAW,GAAG,IAAI,OAAO,EAAE,CAAC;QAClC,IAAM,UAAU,GAAG,IAAI,OAAO,EAAE,CAAC;QACjC,IAAM,aAAa,GAAG,IAAI,MAAM,EAAE,CAAC;QACnC,IAAM,eAAe,GAAG,IAAI,OAAO,EAAE,CAAC;QAEtC,IAAI,mBAAmB,GAAG,KAAK,CAAC;QAChC,IAAM,YAAY,GAAG,UAAC,QAAiB,EAAE,MAAe,EAAE,MAAe,EAAE,GAAY;YACnF,mDAAmD;YACnD,QAAQ,CAAC,aAAa,CAAC,MAAM,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YACvD,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YACzD,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAChD,CAAC,CAAC;QAEF,IAAM,SAAS,GAAG,UAAC,KAA4B;YAC3C,IAAI,KAAI,CAAC,aAAa,IAAI,KAAI,CAAC,YAAY,EAAE;gBACzC,eAAe,CAAC,QAAQ,CAAC,KAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBACxD,WAAW,CAAC,QAAQ,CAAC,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBAChD,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACpC,aAAa,CAAC,QAAQ,CAAC,KAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;gBACnE,aAAa,CAAC,MAAM,EAAE,CAAC;gBACvB,mBAAmB,GAAG,KAAI,CAAC,aAAa,CAAC,eAAe,CAAC,qBAAqB,CAAC;gBAC/E,KAAI,CAAC,aAAa,CAAC,eAAe,CAAC,qBAAqB,GAAG,KAAK,CAAC;gBACjE,OAAO,CAAC,oBAAoB,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,KAAI,CAAC,YAAY,CAAC,cAAc,EAAE,EAAE,eAAe,CAAC,CAAC;gBACrG,eAAe,CAAC,SAAS,EAAE,CAAC;gBAE5B,IAAI,KAAI,CAAC,cAAc,EAAE;oBACrB,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,cAAc,CAAC;oBAC1C,KAAI,CAAC,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC;iBACnC;aACJ;QACL,CAAC,CAAC;QAEF,IAAM,QAAQ,GAAG,UAAC,KAA4B;YAC1C,IAAI,KAAI,CAAC,aAAa,IAAI,KAAI,CAAC,YAAY,EAAE;gBACzC,YAAY,CAAC,KAAK,CAAC,QAAQ,EAAE,eAAe,EAAE,UAAU,EAAE,KAAI,CAAC,UAAU,CAAC,CAAC;gBAC3E,KAAI,CAAC,UAAU,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;gBAC5C,OAAO,CAAC,oBAAoB,CAAC,KAAI,CAAC,UAAU,EAAE,aAAa,EAAE,KAAI,CAAC,UAAU,CAAC,CAAC;gBAE9E,MAAM,CAAC,WAAW,EAAE,eAAe,EAAE,KAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;gBAC7D,KAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;gBACvC,KAAI,CAAC,iBAAiB,EAAE,CAAC;aAC5B;QACL,CAAC,CAAC;QAEF,IAAM,OAAO,GAAG;YACZ,IAAI,KAAI,CAAC,aAAa,IAAI,KAAI,CAAC,YAAY,EAAE;gBACzC,KAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;gBAClC,KAAI,CAAC,aAAa,CAAC,eAAe,CAAC,qBAAqB,GAAG,mBAAmB,CAAC;gBAE/E,IAAI,KAAI,CAAC,cAAc,EAAE;oBACrB,KAAI,CAAC,cAAc,CAAC,IAAI,GAAG,KAAK,CAAC;oBACjC,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;iBAC9B;aACJ;QACL,CAAC,CAAC;QAEF,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAEO,6CAAwB,GAAhC,UAAiC,MAAmB,EAAE,eAAwB;QAA9E,iBAmDC;QAlDG,IAAI,gBAAgB,GAAG,IAAI,UAAU,EAAE,CAAC;QACxC,IAAI,UAAU,GAAG,IAAI,OAAO,EAAE,CAAC;QAC/B,IAAI,eAAe,GAAG,IAAI,OAAO,EAAE,CAAC;QACpC,IAAI,UAAU,GAAG,IAAI,OAAO,EAAE,CAAC;QAC/B,IAAI,mBAA4B,CAAC;QACjC,IAAI,gBAAgB,GAAG,IAAI,OAAO,EAAE,CAAC;QAErC,IAAM,SAAS,GAAG,UAAC,KAA4B;YAC3C,IAAI,KAAI,CAAC,aAAa,IAAI,KAAI,CAAC,YAAY,EAAE;gBACzC,gBAAgB,CAAC,QAAQ,CAAC,KAAI,CAAC,YAAY,CAAC,kBAAmB,CAAC,CAAC;gBACjE,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACpC,mBAAmB,GAAG,KAAI,CAAC,aAAa,CAAC,eAAe,CAAC,qBAAqB,CAAC;gBAC/E,KAAI,CAAC,aAAa,CAAC,eAAe,CAAC,qBAAqB,GAAG,KAAK,CAAC;gBACjE,UAAU,CAAC,QAAQ,CAAC,KAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE,CAAC,CAAC;gBAC/D,eAAe,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;gBAC7E,OAAO,CAAC,oBAAoB,CAAC,eAAe,EAAE,KAAI,CAAC,YAAY,CAAC,cAAc,EAAE,EAAE,gBAAgB,CAAC,CAAC;gBACpG,gBAAgB,CAAC,SAAS,EAAE,CAAC;gBAE7B,IAAI,KAAI,CAAC,cAAc,EAAE;oBACrB,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,cAAc,CAAC;oBAC1C,KAAI,CAAC,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC;iBACnC;aACJ;QACL,CAAC,CAAC;QAEF,IAAM,QAAQ,GAAG,UAAC,KAA4B;YAC1C,IAAI,KAAI,CAAC,aAAa,IAAI,KAAI,CAAC,YAAY,EAAE;gBACzC,KAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACzC,KAAI,CAAC,UAAU,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;gBAC5C,KAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;gBAE5B,IAAI,KAAK,GAAG,CAAC,OAAO,CAAC,6BAA6B,CAAC,KAAI,CAAC,UAAU,EAAE,eAAe,EAAE,gBAAgB,CAAC,CAAC;gBACvG,UAAU,CAAC,iBAAiB,CAAC,eAAe,EAAE,KAAK,EAAE,KAAI,CAAC,cAAc,CAAC,CAAC;gBAC1E,gBAAgB,CAAC,aAAa,CAAC,KAAI,CAAC,cAAc,EAAE,KAAI,CAAC,YAAY,CAAC,kBAAmB,CAAC,CAAC;aAC9F;QACL,CAAC,CAAC;QAEF,IAAM,OAAO,GAAG;YACZ,IAAI,KAAI,CAAC,aAAa,IAAI,KAAI,CAAC,YAAY,EAAE;gBACzC,KAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;gBAClC,KAAI,CAAC,aAAa,CAAC,eAAe,CAAC,qBAAqB,GAAG,mBAAmB,CAAC;gBAE/E,IAAI,KAAI,CAAC,cAAc,EAAE;oBACrB,KAAI,CAAC,cAAc,CAAC,IAAI,GAAG,KAAK,CAAC;oBACjC,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;iBAC9B;aACJ;QACL,CAAC,CAAC;QAEF,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAES,yCAAoB,GAA9B,UAA+B,KAA6B;QACxD,IAAI,KAAK,EAAE;YACP,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC5B;IACL,CAAC;IAED;;OAEG;IACI,sCAAiB,GAAxB;QACI,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,UAAU,CAAC,yBAAyB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAExD,wBAAwB;YACxB,IAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;YAChD,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAElC,IAAI,CAAC,OAAO,EAAE,CAAC;YAEf,uBAAuB;YACvB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE;gBACvC,IAAI,CAAC,YAAY,CAAC,kBAAkB,GAAG,UAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;aACpK;YAED,qFAAqF;YACrF,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;YACnE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACrD,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAExC,uCAAuC;YACvC,IAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,2BAA2B,EAAE,CAAC;YACvE,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC/E,IAAI,CAAC,iBAAiB,CAAC,GAAG,GAAG,cAAc,CAAC,GAAG,CAAC;YAChD,IAAI,CAAC,iBAAiB,CAAC,GAAG,GAAG,cAAc,CAAC,GAAG,CAAC;YAEhD,8BAA8B;YAC9B,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAE9B,mCAAmC;YACnC,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACnE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAErD,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAEjD,0BAA0B;YAC1B,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAC5C,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;SAC9C;IACL,CAAC;IAEO,2CAAsB,GAA9B;QACI,IAAM,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QAC/C,IAAM,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QAE/C,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QAC7D,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC;QACtC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC;QACtC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC;QACtC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC;QAEtC,IAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAE9C,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAE/D,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpE,CAAC;IAES,4BAAO,GAAjB;QACI,iBAAM,OAAO,WAAE,CAAC;QAEhB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,YAAY,EAAE;YACjD,OAAO;SACV;QAED,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE;YACjD,IAAI,IAAI,CAAC,eAAe,EAAE;gBACtB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;gBAClI,IAAI,kBAAkB,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,6BAA6B,CAAC;gBAC3G,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC3C,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;iBACjG;aACJ;YACD,IAAI,CAAC,sBAAsB,EAAE,CAAC;SACjC;IACL,CAAC;IAEM,4BAAO,GAAd;QACI,4CAA4C;QAC5C,iBAAM,OAAO,WAAE,CAAC;QAEhB,KAAqB,UAAa,EAAb,KAAA,IAAI,CAAC,QAAQ,EAAb,cAAa,EAAb,IAAa,EAAE;YAA/B,IAAM,MAAM,SAAA;YACb,MAAM,CAAC,OAAO,EAAE,CAAC;SACpB;QAED,KAAmB,UAAW,EAAX,KAAA,IAAI,CAAC,MAAM,EAAX,cAAW,EAAX,IAAW,EAAE;YAA3B,IAAM,IAAI,SAAA;YACX,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;IACL,CAAC;IACL,iBAAC;AAAD,CAAC,AAzZD,CAAgC,KAAK,GAyZpC","sourcesContent":["import { Gizmo } from \"@babylonjs/core/Gizmos/gizmo\";\r\nimport { Matrix, Quaternion, TmpVectors, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { Observer } from \"@babylonjs/core/Misc/observable\";\r\nimport { PivotTools } from \"@babylonjs/core/Misc/pivotTools\";\r\nimport { UtilityLayerRenderer } from \"@babylonjs/core/Rendering/utilityLayerRenderer\";\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\n\r\nimport { HolographicSlate } from \"../controls/holographicSlate\";\r\nimport { CornerHandle, GizmoHandle, SideHandle } from \"./gizmoHandle\";\r\n\r\n// Mask contains the influence of the drag offset vectors on dimensions or origin of the slate\r\n// Mask vector is multiplied to the offset vector\r\ntype HandleMasks = {\r\n    dimensions: Vector3;\r\n    origin: Vector3;\r\n};\r\n\r\n/**\r\n * Gizmo to resize 2D slates\r\n */\r\nexport class SlateGizmo extends Gizmo {\r\n    private _boundingDimensions = new Vector3(0, 0, 0);\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<AbstractMesh>>>;\r\n\r\n    private _tmpQuaternion = new Quaternion();\r\n    private _tmpVector = new Vector3(0, 0, 0);\r\n\r\n    // Ordered bl, br, tr, tl\r\n    private _corners: CornerHandle[] = [];\r\n    // Ordered left, bottom, right, top\r\n    private _sides: SideHandle[] = [];\r\n    private _handlesParent: TransformNode;\r\n    private _handleHovered: Nullable<GizmoHandle>;\r\n    private _handleDragged: Nullable<GizmoHandle>;\r\n\r\n    private _boundingBoxGizmo = {\r\n        min: new Vector3(),\r\n        max: new Vector3(),\r\n    };\r\n\r\n    /**\r\n     * Value we use to offset handles from mesh\r\n     */\r\n    private _margin = 0.35;\r\n    private _attachedSlate: Nullable<HolographicSlate> = null;\r\n    /**\r\n     * If set, the handles will increase in size based on the distance away from the camera to have a consistent screen size (Default: true)\r\n     */\r\n    public fixedScreenSize = false;\r\n    /**\r\n     * The distance away from the object which the draggable meshes should appear world sized when fixedScreenSize is set to true (default: 10)\r\n     */\r\n    public fixedScreenSizeDistanceFactor = 10;\r\n\r\n    /**\r\n     * Size of the handles (meters in XR)\r\n     */\r\n    public handleSize = 0.01;\r\n\r\n    /**\r\n     * The slate attached to this gizmo\r\n     */\r\n    public set attachedSlate(control: Nullable<HolographicSlate>) {\r\n        if (control) {\r\n            this.attachedMesh = control.mesh;\r\n            this.updateBoundingBox();\r\n\r\n            this._pickedPointObserver = control._host.onPickingObservable.add((pickedMesh) => {\r\n                if (this._handleHovered && (!pickedMesh || pickedMesh.parent !== this._handleHovered.node)) {\r\n                    this._handleHovered.hover = false;\r\n                    this._handleHovered = null;\r\n                }\r\n\r\n                if (pickedMesh && pickedMesh.parent && pickedMesh.parent.reservedDataStore && pickedMesh.parent.reservedDataStore.handle) {\r\n                    const handle = pickedMesh.parent.reservedDataStore.handle as GizmoHandle;\r\n                    if (handle.gizmo === this) {\r\n                        this._handleHovered = handle;\r\n                        this._handleHovered.hover = true;\r\n                    }\r\n                }\r\n            });\r\n        } else if (this._attachedSlate) {\r\n            this._attachedSlate._host.onPickingObservable.remove(this._pickedPointObserver);\r\n        }\r\n        this._attachedSlate = control;\r\n    }\r\n\r\n    public get attachedSlate(): Nullable<HolographicSlate> {\r\n        return this._attachedSlate;\r\n    }\r\n\r\n    constructor(utilityLayer?: UtilityLayerRenderer) {\r\n        super(utilityLayer);\r\n\r\n        this._createNode();\r\n        this.updateScale = false;\r\n    }\r\n\r\n    private _createNode() {\r\n        this._handlesParent = new TransformNode(\"handlesParent\", this.gizmoLayer.utilityLayerScene);\r\n        this._handlesParent.rotationQuaternion = Quaternion.Identity();\r\n\r\n        const masksCorners = [\r\n            {\r\n                dimensions: new Vector3(-1, -1, 0),\r\n                origin: new Vector3(1, 0, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(1, -1, 0),\r\n                origin: new Vector3(0, 0, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(1, 1, 0),\r\n                origin: new Vector3(0, 1, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(-1, 1, 0),\r\n                origin: new Vector3(1, 1, 0),\r\n            },\r\n        ];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const corner = new CornerHandle(this, this.gizmoLayer.utilityLayerScene);\r\n            this._corners.push(corner);\r\n            corner.node.rotation.z = (Math.PI / 2) * i;\r\n            corner.node.scaling.setAll(this.handleSize);\r\n\r\n            corner.node.parent = this._handlesParent;\r\n            this._assignDragBehaviorCorners(\r\n                corner,\r\n                (originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks) => this._moveHandle(originStart, dimensionsStart, offset, masks, true),\r\n                masksCorners[i]\r\n            );\r\n        }\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const side = new SideHandle(this, this.gizmoLayer.utilityLayerScene);\r\n            this._sides.push(side);\r\n            side.node.rotation.z = (Math.PI / 2) * i;\r\n            side.node.scaling.copyFromFloats(this.handleSize, this.handleSize, this.handleSize);\r\n            side.node.parent = this._handlesParent;\r\n            this._assignDragBehaviorSides(side, i % 2 === 0 ? new Vector3(0, 1, 0) : new Vector3(1, 0, 0));\r\n        }\r\n\r\n        this._handlesParent.parent = this._rootMesh;\r\n    }\r\n\r\n    private _keepAspectRatio(vector: Vector3, aspectRatio: number, invertDiagonal: boolean = false) {\r\n        const axis = TmpVectors.Vector3[0];\r\n        axis.copyFromFloats(aspectRatio, 1, 0).normalize();\r\n        if (invertDiagonal) {\r\n            axis.y *= -1;\r\n        }\r\n        const dot = Vector3.Dot(vector, axis);\r\n        vector.copyFrom(axis).scaleInPlace(dot);\r\n    }\r\n\r\n    private _clampDimensions(vector: Vector3, dimensions: Vector3, mask: Vector3, keepAspectRatio: boolean = false) {\r\n        const impact = TmpVectors.Vector3[0];\r\n        impact.copyFrom(vector).multiplyInPlace(mask);\r\n\r\n        const clampedDimensions = TmpVectors.Vector3[1];\r\n        clampedDimensions.copyFromFloats(\r\n            Math.max(this._attachedSlate!.minDimensions.x, impact.x + dimensions.x),\r\n            Math.max(this._attachedSlate!.minDimensions.y, impact.y + dimensions.y),\r\n            0\r\n        );\r\n\r\n        // Calculating the real impact of vector on clamped dimensions\r\n        impact.copyFrom(clampedDimensions).subtractInPlace(dimensions);\r\n\r\n        let factor = TmpVectors.Vector3[2];\r\n        factor.copyFrom(impact);\r\n        if (keepAspectRatio) {\r\n            // We want to keep aspect ratio of vector while clamping so we move by the minimum of the 2 dimensions\r\n            factor.x = Math.min(Math.abs(clampedDimensions.x - dimensions.x), Math.abs(clampedDimensions.y - dimensions.y));\r\n            factor.y = factor.x;\r\n        }\r\n\r\n        vector.x = Math.sign(vector.x) * Math.abs(factor.x);\r\n        vector.y = Math.sign(vector.y) * Math.abs(factor.y);\r\n    }\r\n\r\n    private _moveHandle(originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks, isCorner: boolean) {\r\n        if (!this._attachedSlate) {\r\n            return;\r\n        }\r\n\r\n        if (isCorner) {\r\n            const aspectRatio = dimensionsStart.x / dimensionsStart.y;\r\n            this._keepAspectRatio(offset, aspectRatio, masks.dimensions.x * masks.dimensions.y < 0);\r\n        }\r\n        this._clampDimensions(offset, dimensionsStart, masks.dimensions, isCorner);\r\n\r\n        const offsetOriginMasked = TmpVectors.Vector3[0];\r\n        const offsetDimensionsMasked = TmpVectors.Vector3[1];\r\n        offsetOriginMasked.copyFrom(offset).multiplyInPlace(masks.origin);\r\n        offsetDimensionsMasked.copyFrom(offset).multiplyInPlace(masks.dimensions);\r\n\r\n        this._attachedSlate.origin.copyFrom(originStart).addInPlace(offsetOriginMasked);\r\n        this._attachedSlate.dimensions.copyFrom(dimensionsStart).addInPlace(offsetDimensionsMasked);\r\n        this._attachedSlate.backplateDimensions.x = this._attachedSlate.dimensions.x;\r\n    }\r\n\r\n    private _assignDragBehaviorCorners(\r\n        handle: GizmoHandle,\r\n        moveFn: (originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks) => void,\r\n        masks: HandleMasks\r\n    ) {\r\n        const dimensionsStart = new Vector3();\r\n        const originStart = new Vector3();\r\n        const dragOrigin = new Vector3();\r\n        const toObjectFrame = new Matrix();\r\n        const dragPlaneNormal = new Vector3();\r\n\r\n        let previousFollowState = false;\r\n        const projectToRef = (position: Vector3, normal: Vector3, origin: Vector3, ref: Vector3) => {\r\n            // Projects on the plane with its normal and origin\r\n            position.subtractToRef(origin, TmpVectors.Vector3[0]);\r\n            const dot = Vector3.Dot(TmpVectors.Vector3[0], normal);\r\n            TmpVectors.Vector3[1].copyFrom(normal).scaleInPlace(dot);\r\n            TmpVectors.Vector3[0].subtractInPlace(TmpVectors.Vector3[1]);\r\n            TmpVectors.Vector3[0].addToRef(origin, ref);\r\n        };\r\n\r\n        const dragStart = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                dimensionsStart.copyFrom(this.attachedSlate.dimensions);\r\n                originStart.copyFrom(this.attachedSlate.origin);\r\n                dragOrigin.copyFrom(event.position);\r\n                toObjectFrame.copyFrom(this.attachedMesh.computeWorldMatrix(true));\r\n                toObjectFrame.invert();\r\n                previousFollowState = this.attachedSlate.defaultBehavior.followBehaviorEnabled;\r\n                this.attachedSlate.defaultBehavior.followBehaviorEnabled = false;\r\n                Vector3.TransformNormalToRef(Vector3.Forward(), this.attachedMesh.getWorldMatrix(), dragPlaneNormal);\r\n                dragPlaneNormal.normalize();\r\n\r\n                if (this._handleHovered) {\r\n                    this._handleDragged = this._handleHovered;\r\n                    this._handleDragged.drag = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        const dragging = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                projectToRef(event.position, dragPlaneNormal, dragOrigin, this._tmpVector);\r\n                this._tmpVector.subtractInPlace(dragOrigin);\r\n                Vector3.TransformNormalToRef(this._tmpVector, toObjectFrame, this._tmpVector);\r\n\r\n                moveFn(originStart, dimensionsStart, this._tmpVector, masks);\r\n                this.attachedSlate._positionElements();\r\n                this.updateBoundingBox();\r\n            }\r\n        };\r\n\r\n        const dragEnd = () => {\r\n            if (this.attachedSlate && this.attachedNode) {\r\n                this.attachedSlate._updatePivot();\r\n                this.attachedSlate.defaultBehavior.followBehaviorEnabled = previousFollowState;\r\n\r\n                if (this._handleDragged) {\r\n                    this._handleDragged.drag = false;\r\n                    this._handleDragged = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\r\n    }\r\n\r\n    private _assignDragBehaviorSides(handle: GizmoHandle, dragPlaneNormal: Vector3) {\r\n        let quaternionOrigin = new Quaternion();\r\n        let dragOrigin = new Vector3();\r\n        let directionOrigin = new Vector3();\r\n        let worldPivot = new Vector3();\r\n        let previousFollowState: boolean;\r\n        let worldPlaneNormal = new Vector3();\r\n\r\n        const dragStart = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                quaternionOrigin.copyFrom(this.attachedMesh.rotationQuaternion!);\r\n                dragOrigin.copyFrom(event.position);\r\n                previousFollowState = this.attachedSlate.defaultBehavior.followBehaviorEnabled;\r\n                this.attachedSlate.defaultBehavior.followBehaviorEnabled = false;\r\n                worldPivot.copyFrom(this.attachedMesh.getAbsolutePivotPoint());\r\n                directionOrigin.copyFrom(dragOrigin).subtractInPlace(worldPivot).normalize();\r\n                Vector3.TransformNormalToRef(dragPlaneNormal, this.attachedMesh.getWorldMatrix(), worldPlaneNormal);\r\n                worldPlaneNormal.normalize();\r\n\r\n                if (this._handleHovered) {\r\n                    this._handleDragged = this._handleHovered;\r\n                    this._handleDragged.drag = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        const dragging = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                this._tmpVector.copyFrom(event.position);\r\n                this._tmpVector.subtractInPlace(worldPivot);\r\n                this._tmpVector.normalize();\r\n\r\n                let angle = -Vector3.GetAngleBetweenVectorsOnPlane(this._tmpVector, directionOrigin, worldPlaneNormal);\r\n                Quaternion.RotationAxisToRef(dragPlaneNormal, angle, this._tmpQuaternion);\r\n                quaternionOrigin.multiplyToRef(this._tmpQuaternion, this.attachedMesh.rotationQuaternion!);\r\n            }\r\n        };\r\n\r\n        const dragEnd = () => {\r\n            if (this.attachedSlate && this.attachedNode) {\r\n                this.attachedSlate._updatePivot();\r\n                this.attachedSlate.defaultBehavior.followBehaviorEnabled = previousFollowState;\r\n\r\n                if (this._handleDragged) {\r\n                    this._handleDragged.drag = false;\r\n                    this._handleDragged = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\r\n    }\r\n\r\n    protected _attachedNodeChanged(value: Nullable<AbstractMesh>) {\r\n        if (value) {\r\n            this.updateBoundingBox();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the bounding box information for the gizmo\r\n     */\r\n    public updateBoundingBox() {\r\n        if (this.attachedMesh) {\r\n            PivotTools._RemoveAndStorePivotPoint(this.attachedMesh);\r\n\r\n            // Store original parent\r\n            const originalParent = this.attachedMesh.parent;\r\n            this.attachedMesh.setParent(null);\r\n\r\n            this._update();\r\n\r\n            // Rotate based on axis\r\n            if (!this.attachedMesh.rotationQuaternion) {\r\n                this.attachedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.attachedMesh.rotation.y, this.attachedMesh.rotation.x, this.attachedMesh.rotation.z);\r\n            }\r\n\r\n            // Store original position and reset mesh to origin before computing the bounding box\r\n            this._tmpQuaternion.copyFrom(this.attachedMesh.rotationQuaternion);\r\n            this._tmpVector.copyFrom(this.attachedMesh.position);\r\n            this.attachedMesh.rotationQuaternion.set(0, 0, 0, 1);\r\n            this.attachedMesh.position.set(0, 0, 0);\r\n\r\n            // Update bounding dimensions/positions\r\n            const boundingMinMax = this.attachedMesh.getHierarchyBoundingVectors();\r\n            boundingMinMax.max.subtractToRef(boundingMinMax.min, this._boundingDimensions);\r\n            this._boundingBoxGizmo.min = boundingMinMax.min;\r\n            this._boundingBoxGizmo.max = boundingMinMax.max;\r\n\r\n            // Update handles of the gizmo\r\n            this._updateHandlesPosition();\r\n\r\n            // Restore position/rotation values\r\n            this.attachedMesh.rotationQuaternion.copyFrom(this._tmpQuaternion);\r\n            this.attachedMesh.position.copyFrom(this._tmpVector);\r\n\r\n            PivotTools._RestorePivotPoint(this.attachedMesh);\r\n\r\n            // Restore original parent\r\n            this.attachedMesh.setParent(originalParent);\r\n            this.attachedMesh.computeWorldMatrix(true);\r\n        }\r\n    }\r\n\r\n    private _updateHandlesPosition() {\r\n        const min = this._boundingBoxGizmo.min.clone();\r\n        const max = this._boundingBoxGizmo.max.clone();\r\n\r\n        const handleScaling = this._corners[0].node.scaling.length();\r\n        min.x -= this._margin * handleScaling;\r\n        min.y -= this._margin * handleScaling;\r\n        max.x += this._margin * handleScaling;\r\n        max.y += this._margin * handleScaling;\r\n\r\n        const center = min.add(max).scaleInPlace(0.5);\r\n\r\n        this._corners[0].node.position.copyFromFloats(min.x, min.y, 0);\r\n        this._corners[1].node.position.copyFromFloats(max.x, min.y, 0);\r\n        this._corners[2].node.position.copyFromFloats(max.x, max.y, 0);\r\n        this._corners[3].node.position.copyFromFloats(min.x, max.y, 0);\r\n\r\n        this._sides[0].node.position.copyFromFloats(min.x, center.y, 0);\r\n        this._sides[1].node.position.copyFromFloats(center.x, min.y, 0);\r\n        this._sides[2].node.position.copyFromFloats(max.x, center.y, 0);\r\n        this._sides[3].node.position.copyFromFloats(center.x, max.y, 0);\r\n    }\r\n\r\n    protected _update() {\r\n        super._update();\r\n\r\n        if (!this.gizmoLayer.utilityLayerScene.activeCamera) {\r\n            return;\r\n        }\r\n\r\n        if (this._attachedSlate && this._attachedSlate.mesh) {\r\n            if (this.fixedScreenSize) {\r\n                this._attachedSlate.mesh.absolutePosition.subtractToRef(this.gizmoLayer.utilityLayerScene.activeCamera.position, this._tmpVector);\r\n                var distanceFromCamera = (this.handleSize * this._tmpVector.length()) / this.fixedScreenSizeDistanceFactor;\r\n                for (let i = 0; i < this._corners.length; i++) {\r\n                    this._corners[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\r\n                }\r\n            }\r\n            this._updateHandlesPosition();\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        // Will dispose rootMesh and all descendants\r\n        super.dispose();\r\n\r\n        for (const corner of this._corners) {\r\n            corner.dispose();\r\n        }\r\n\r\n        for (const side of this._sides) {\r\n            side.dispose();\r\n        }\r\n    }\r\n}\r\n"]}