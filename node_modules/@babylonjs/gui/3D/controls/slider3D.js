import { __extends } from "tslib";
import { Observable } from "@babylonjs/core/Misc/observable";
import { Vector3 } from "@babylonjs/core/Maths/math.vector";
import { TransformNode } from "@babylonjs/core/Meshes/transformNode";
import { Control3D } from "./control3D";
import { BoxBuilder } from "@babylonjs/core/Meshes/Builders/boxBuilder";
import { CylinderBuilder } from "@babylonjs/core/Meshes/Builders/cylinderBuilder";
import { PointerDragBehavior } from "@babylonjs/core/Behaviors/Meshes/pointerDragBehavior";
import { StandardMaterial } from "@babylonjs/core/Materials/standardMaterial";
import { Color3 } from "@babylonjs/core/Maths/math.color";
var SLIDER_MIN = 0;
var SLIDER_MAX = 100;
var SLIDER_VAL = 50;
var SLIDER_STEP = 0;
var SLIDER_SCALING = 2.0;
/**
 * Class used to create a slider in 3D
 */
var Slider3D = /** @class */ (function (_super) {
    __extends(Slider3D, _super);
    /**
     * Creates a new slider
     * @param name defines the control name
     */
    function Slider3D(name) {
        var _this = _super.call(this, name) || this;
        /** Observable raised when the sldier value changes */
        _this.onValueChangedObservable = new Observable();
        _this._minimum = SLIDER_MIN;
        _this._maximum = SLIDER_MAX;
        _this._step = SLIDER_STEP;
        _this._value = SLIDER_VAL;
        return _this;
    }
    Object.defineProperty(Slider3D.prototype, "mesh", {
        /**
         * Gets the mesh used to render this control
         */
        get: function () {
            if (this.node) {
                return this._sliderThumb;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "minimum", {
        /** Gets or sets minimum value */
        get: function () {
            return this._minimum;
        },
        set: function (value) {
            if (this._minimum === value) {
                return;
            }
            this._minimum = Math.max(value, SLIDER_MIN);
            this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "maximum", {
        /** Gets or sets maximum value */
        get: function () {
            return this._maximum;
        },
        set: function (value) {
            if (this._maximum === value) {
                return;
            }
            this._maximum = Math.max(value, this._minimum);
            this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "step", {
        /** Gets or sets step value */
        get: function () {
            return this._step;
        },
        set: function (value) {
            if (this._step === value) {
                return;
            }
            this._step = Math.max(Math.min(value, this._maximum - this._minimum), SLIDER_STEP);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "value", {
        /** Gets or sets current value */
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (this._value === value) {
                return;
            }
            this._value = Math.max(Math.min(value, this._maximum), this._minimum);
            this.onValueChangedObservable.notifyObservers(this._value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "start", {
        get: function () {
            if (!this.node) {
                return -SLIDER_SCALING / 2;
            }
            return this._sliderBar.position.x - this._sliderBar.scaling.y / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "end", {
        get: function () {
            if (!this.node) {
                return SLIDER_SCALING / 2;
            }
            return this._sliderBar.position.x + this._sliderBar.scaling.y / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "sliderBarMaterial", {
        /**
         * Gets the slider bar material used by this control
         */
        get: function () {
            return this._sliderBarMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "sliderThumbMaterial", {
        /**
         * Gets the slider thumb material used by this control
         */
        get: function () {
            return this._sliderThumbMaterial;
        },
        enumerable: false,
        configurable: true
    });
    // Mesh association
    Slider3D.prototype._createNode = function (scene) {
        var anchor = new TransformNode(this.name + "_slider", scene);
        var sliderBar = CylinderBuilder.CreateCylinder(this.name + "_sliderbar", { diameter: 0.03, height: 1.0 }, scene);
        sliderBar.rotation.z = -Math.PI / 2;
        sliderBar.scaling.y = SLIDER_SCALING;
        sliderBar.isPickable = false;
        sliderBar.setParent(anchor);
        var sliderThumb = BoxBuilder.CreateBox(this.name + "_sliderthumb", { size: 0.1 }, scene);
        sliderThumb.scaling = new Vector3(SLIDER_SCALING, SLIDER_SCALING, SLIDER_SCALING);
        sliderThumb.position.x = this._convertToPosition(this.value);
        sliderThumb.addBehavior(this._createBehavior());
        sliderThumb.setParent(anchor);
        this._sliderBar = sliderBar;
        this._sliderThumb = sliderThumb;
        return anchor;
    };
    Slider3D.prototype._affectMaterial = function (mesh) {
        var barMaterial = new StandardMaterial(this.name + "_sliderbar_material", mesh.getScene());
        barMaterial.specularColor = Color3.Black();
        this._sliderBar.material = barMaterial;
        var thumbMaterial = new StandardMaterial(this.name + "_sliderthumb_material", mesh.getScene());
        thumbMaterial.specularColor = Color3.Black();
        mesh.material = thumbMaterial;
        this._sliderBarMaterial = barMaterial;
        this._sliderThumbMaterial = thumbMaterial;
    };
    Slider3D.prototype._createBehavior = function () {
        var _this = this;
        var pointerDragBehavior = new PointerDragBehavior({ dragAxis: Vector3.Right() });
        pointerDragBehavior.moveAttached = false;
        pointerDragBehavior.onDragObservable.add(function (event) {
            var newPosition = _this._sliderThumb.position.x + event.dragDistance;
            _this._sliderThumb.position.x = Math.max(Math.min(newPosition, _this.end), _this.start);
            _this.value = _this._convertToValue(_this._sliderThumb.position.x);
        });
        pointerDragBehavior.onDragEndObservable.add(function (event) {
            _this._sliderThumb.position.x = _this._convertToPosition(_this.value);
        });
        return pointerDragBehavior;
    };
    Slider3D.prototype._convertToPosition = function (value) {
        var position = ((value - this.minimum) / (this.maximum - this.minimum)) * (this.end - this.start) + this.start;
        return Math.min(Math.max(position, this.start), this.end);
    };
    Slider3D.prototype._convertToValue = function (position) {
        var value = ((position - this.start) / (this.end - this.start)) * (this.maximum - this.minimum);
        value = this.step ? Math.round(value / this.step) * this.step : value;
        return Math.max(Math.min(this.minimum + value, this._maximum), this._minimum);
    };
    /**
     * Releases all associated resources
     */
    Slider3D.prototype.dispose = function () {
        var _a, _b, _c, _d;
        _super.prototype.dispose.call(this);
        (_a = this._sliderBar) === null || _a === void 0 ? void 0 : _a.dispose();
        (_b = this._sliderThumb) === null || _b === void 0 ? void 0 : _b.dispose();
        (_c = this._sliderBarMaterial) === null || _c === void 0 ? void 0 : _c.dispose();
        (_d = this._sliderThumbMaterial) === null || _d === void 0 ? void 0 : _d.dispose();
    };
    return Slider3D;
}(Control3D));
export { Slider3D };
//# sourceMappingURL=slider3D.js.map