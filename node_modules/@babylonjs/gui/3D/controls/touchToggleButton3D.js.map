{"version":3,"file":"touchToggleButton3D.js","sourceRoot":"","sources":["../../../../sourceES6/gui/src/3D/controls/touchToggleButton3D.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,iCAAiC,CAAC;AAK7D,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD;;GAEG;AACH;IAAyC,uCAAa;IAalD;;;;OAIG;IACH,6BAAY,IAAa,EAAE,aAAoB;QAA/C,YACI,kBAAM,IAAI,EAAE,aAAa,CAAC,SAI7B;QAtBO,gBAAU,GAAG,KAAK,CAAC;QAE3B;;WAEG;QACI,0BAAoB,GAAG,IAAI,UAAU,EAAW,CAAC;QAExD;;WAEG;QACI,2BAAqB,GAAG,IAAI,UAAU,EAAW,CAAC;QASrD,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAC,cAAc;YAC1C,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;;IACP,CAAC;IAEO,uCAAS,GAAjB,UAAkB,QAAiB;QAC/B,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;QAEnC,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;SACvD;aACI;YACD,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;SACxD;IACL,CAAC;IAES,0CAAY,GAAtB;QACI,OAAO,qBAAqB,CAAC;IACjC,CAAC;IAED,mBAAmB;IACT,yCAAW,GAArB,UAAsB,KAAY;QAC9B,OAAO,iBAAM,WAAW,YAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAES,6CAAe,GAAzB,UAA0B,IAAkB;QACxC,iBAAM,eAAe,YAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACI,qCAAO,GAAd;QACI,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,CAAC;QAClC,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;QAEnC,iBAAM,OAAO,WAAE,CAAC;IACpB,CAAC;IACL,0BAAC;AAAD,CAAC,AA1DD,CAAyC,aAAa,GA0DrD","sourcesContent":["import { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { Observable } from \"@babylonjs/core/Misc/observable\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { TransformNode } from \"@babylonjs/core/Meshes/transformNode\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\n\r\nimport { TouchButton3D } from \"./touchButton3D\";\r\n\r\n/**\r\n * Class used as base class for touch-enabled toggleable buttons\r\n */\r\nexport class TouchToggleButton3D extends TouchButton3D {\r\n    private _isPressed = false;\r\n\r\n    /**\r\n     * An event triggered when the button is toggled on\r\n     */\r\n    public onToggleOnObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the button is toggled off\r\n     */\r\n    public onToggleOffObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param collisionMesh defines the mesh to track near interactions with\r\n     */\r\n    constructor(name?: string, collisionMesh?: Mesh) {\r\n        super(name, collisionMesh);\r\n        this.onPointerUpObservable.add((posVecWithInfo) => {\r\n            this._onToggle(posVecWithInfo);\r\n        });\r\n    }\r\n\r\n    private _onToggle(position: Vector3) {\r\n        this._isPressed = !this._isPressed;\r\n\r\n        if (this._isPressed) {\r\n            this.onToggleOnObservable.notifyObservers(position);\r\n        }\r\n        else {\r\n            this.onToggleOffObservable.notifyObservers(position);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchToggleButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return super._createNode(scene);\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        super._affectMaterial(mesh);\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onToggleOnObservable.clear();\r\n        this.onToggleOffObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n}"]}