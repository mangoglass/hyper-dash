import { Nullable } from "@babylonjs/core/types";
import { Observable } from "@babylonjs/core/Misc/observable";
import { TransformNode } from "@babylonjs/core/Meshes/transformNode";
import { Scene } from "@babylonjs/core/scene";
import { Control3D } from "./control3D";
import { StandardMaterial } from "@babylonjs/core/Materials/standardMaterial";
import { AbstractMesh } from "@babylonjs/core/Meshes/abstractMesh";
/**
 * Class used to create a slider in 3D
 */
export declare class Slider3D extends Control3D {
    private _sliderBarMaterial;
    private _sliderThumbMaterial;
    private _sliderThumb;
    private _sliderBar;
    private _minimum;
    private _maximum;
    private _value;
    private _step;
    /** Observable raised when the sldier value changes */
    onValueChangedObservable: Observable<number>;
    /**
     * Creates a new slider
     * @param name defines the control name
     */
    constructor(name?: string);
    /**
     * Gets the mesh used to render this control
     */
    get mesh(): Nullable<AbstractMesh>;
    /** Gets or sets minimum value */
    get minimum(): number;
    set minimum(value: number);
    /** Gets or sets maximum value */
    get maximum(): number;
    set maximum(value: number);
    /** Gets or sets step value */
    get step(): number;
    set step(value: number);
    /** Gets or sets current value */
    get value(): number;
    set value(value: number);
    protected get start(): number;
    protected get end(): number;
    /**
     * Gets the slider bar material used by this control
     */
    get sliderBarMaterial(): StandardMaterial;
    /**
     * Gets the slider thumb material used by this control
     */
    get sliderThumbMaterial(): StandardMaterial;
    protected _createNode(scene: Scene): TransformNode;
    protected _affectMaterial(mesh: AbstractMesh): void;
    private _createBehavior;
    private _convertToPosition;
    private _convertToValue;
    /**
     * Releases all associated resources
     */
    dispose(): void;
}
