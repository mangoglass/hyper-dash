import { Tools } from "@babylonjs/core/Misc/tools";
import { ArrayItem, GLTFLoader } from "../glTFLoader";
var NAME = "EXT_meshopt_compression";
/**
 * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_meshopt_compression)
 *
 * This extension uses a WebAssembly decoder module from https://github.com/zeux/meshoptimizer/tree/master/js
 */
var EXT_meshopt_compression = /** @class */ (function () {
    /** @hidden */
    function EXT_meshopt_compression(loader) {
        /**
         * The name of this extension.
         */
        this.name = NAME;
        this.enabled = loader.isExtensionUsed(NAME);
        this._loader = loader;
        if (this.enabled && !EXT_meshopt_compression._DecoderPromise) {
            EXT_meshopt_compression._DecoderPromise = Tools.LoadScriptAsync(EXT_meshopt_compression.DecoderPath).then(function () {
                // Wait for WebAssembly compilation before resolving promise
                return MeshoptDecoder.ready;
            });
        }
    }
    /** @hidden */
    EXT_meshopt_compression.prototype.dispose = function () {
        this._loader = null;
    };
    /** @hidden */
    EXT_meshopt_compression.prototype.loadBufferViewAsync = function (context, bufferView) {
        var _this = this;
        return GLTFLoader.LoadExtensionAsync(context, bufferView, this.name, function (extensionContext, extension) {
            var bufferViewMeshopt = bufferView;
            if (bufferViewMeshopt._meshOptData) {
                return bufferViewMeshopt._meshOptData;
            }
            var buffer = ArrayItem.Get(context + "/buffer", _this._loader.gltf.buffers, extension.buffer);
            var bufferPromise = _this._loader.loadBufferAsync("/buffers/" + buffer.index, buffer, (extension.byteOffset || 0), extension.byteLength);
            bufferViewMeshopt._meshOptData = Promise.all([bufferPromise, EXT_meshopt_compression._DecoderPromise]).then(function (res) {
                var source = res[0];
                var count = extension.count;
                var stride = extension.byteStride;
                var result = new Uint8Array(new ArrayBuffer(count * stride));
                MeshoptDecoder.decodeGltfBuffer(result, count, stride, source, extension.mode, extension.filter);
                return Promise.resolve(result);
            });
            return bufferViewMeshopt._meshOptData;
        });
    };
    /**
     * Path to decoder module; defaults to https://preview.babylonjs.com/meshopt_decoder.js
     */
    EXT_meshopt_compression.DecoderPath = "https://preview.babylonjs.com/meshopt_decoder.js";
    return EXT_meshopt_compression;
}());
export { EXT_meshopt_compression };
GLTFLoader.RegisterExtension(NAME, function (loader) { return new EXT_meshopt_compression(loader); });
//# sourceMappingURL=EXT_meshopt_compression.js.map