{"version":3,"file":"EXT_meshopt_compression.js","sourceRoot":"","sources":["../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/EXT_meshopt_compression.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,4BAA4B,CAAC;AAEnD,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAItD,IAAM,IAAI,GAAG,yBAAyB,CAAC;AAQvC;;;;GAIG;AACH;IAmBI,cAAc;IACd,iCAAY,MAAkB;QAnB9B;;WAEG;QACa,SAAI,GAAG,IAAI,CAAC;QAiBxB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,uBAAuB,CAAC,eAAe,EAAE;YAC1D,uBAAuB,CAAC,eAAe,GAAG,KAAK,CAAC,eAAe,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;gBACtG,4DAA4D;gBAC5D,OAAO,cAAc,CAAC,KAAK,CAAC;YAChC,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAED,cAAc;IACP,yCAAO,GAAd;QACK,IAAI,CAAC,OAAe,GAAG,IAAI,CAAC;IACjC,CAAC;IAED,cAAc;IACP,qDAAmB,GAA1B,UAA2B,OAAe,EAAE,UAAuB;QAAnE,iBAqBC;QApBG,OAAO,UAAU,CAAC,kBAAkB,CAA0C,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,IAAI,EAAE,UAAC,gBAAgB,EAAE,SAAS;YACtI,IAAM,iBAAiB,GAAG,UAAgC,CAAC;YAC3D,IAAI,iBAAiB,CAAC,YAAY,EAAE;gBAChC,OAAO,iBAAiB,CAAC,YAAY,CAAC;aACzC;YAED,IAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAI,OAAO,YAAS,EAAE,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;YAC/F,IAAM,aAAa,GAAG,KAAI,CAAC,OAAO,CAAC,eAAe,CAAC,cAAY,MAAM,CAAC,KAAO,EAAE,MAAM,EAAE,CAAC,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;YAE1I,iBAAiB,CAAC,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,uBAAuB,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG;gBAC5G,IAAM,MAAM,GAAG,GAAG,CAAC,CAAC,CAAe,CAAC;gBACpC,IAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;gBAC9B,IAAM,MAAM,GAAG,SAAS,CAAC,UAAU,CAAC;gBACpC,IAAM,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,WAAW,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;gBAC/D,cAAc,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;gBACjG,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,OAAO,iBAAiB,CAAC,YAAY,CAAC;QAC1C,CAAC,CAAC,CAAC;IACP,CAAC;IAhDD;;OAEG;IACW,mCAAW,GAAW,kDAAkD,CAAC;IA8C3F,8BAAC;CAAA,AA5DD,IA4DC;SA5DY,uBAAuB;AA8DpC,UAAU,CAAC,iBAAiB,CAAC,IAAI,EAAE,UAAC,MAAM,IAAK,OAAA,IAAI,uBAAuB,CAAC,MAAM,CAAC,EAAnC,CAAmC,CAAC,CAAC","sourcesContent":["import { Nullable } from \"@babylonjs/core/types\";\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { ArrayItem, GLTFLoader } from \"../glTFLoader\";\nimport { IBufferView } from \"../glTFLoaderInterfaces\";\nimport { IEXTMeshoptCompression } from \"babylonjs-gltf2interface\";\n\nconst NAME = \"EXT_meshopt_compression\";\n\ndeclare var MeshoptDecoder: any;\n\ninterface IBufferViewMeshopt extends IBufferView {\n    _meshOptData?: Promise<ArrayBufferView>;\n}\n\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_meshopt_compression)\n *\n * This extension uses a WebAssembly decoder module from https://github.com/zeux/meshoptimizer/tree/master/js\n */\nexport class EXT_meshopt_compression implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    /**\n     * Path to decoder module; defaults to https://preview.babylonjs.com/meshopt_decoder.js\n     */\n    public static DecoderPath: string = \"https://preview.babylonjs.com/meshopt_decoder.js\";\n\n    private _loader: GLTFLoader;\n    private static _DecoderPromise?: Promise<any>;\n\n    /** @hidden */\n    constructor(loader: GLTFLoader) {\n        this.enabled = loader.isExtensionUsed(NAME);\n        this._loader = loader;\n\n        if (this.enabled && !EXT_meshopt_compression._DecoderPromise) {\n            EXT_meshopt_compression._DecoderPromise = Tools.LoadScriptAsync(EXT_meshopt_compression.DecoderPath).then(() => {\n                // Wait for WebAssembly compilation before resolving promise\n                return MeshoptDecoder.ready;\n            });\n        }\n    }\n\n    /** @hidden */\n    public dispose() {\n        (this._loader as any) = null;\n    }\n\n    /** @hidden */\n    public loadBufferViewAsync(context: string, bufferView: IBufferView): Nullable<Promise<ArrayBufferView>> {\n        return GLTFLoader.LoadExtensionAsync<IEXTMeshoptCompression, ArrayBufferView>(context, bufferView, this.name, (extensionContext, extension) => {\n            const bufferViewMeshopt = bufferView as IBufferViewMeshopt;\n            if (bufferViewMeshopt._meshOptData) {\n                return bufferViewMeshopt._meshOptData;\n            }\n\n            const buffer = ArrayItem.Get(`${context}/buffer`, this._loader.gltf.buffers, extension.buffer);\n            const bufferPromise = this._loader.loadBufferAsync(`/buffers/${buffer.index}`, buffer, (extension.byteOffset || 0), extension.byteLength);\n\n            bufferViewMeshopt._meshOptData = Promise.all([bufferPromise, EXT_meshopt_compression._DecoderPromise]).then((res) => {\n                const source = res[0] as Uint8Array;\n                const count = extension.count;\n                const stride = extension.byteStride;\n                const result = new Uint8Array(new ArrayBuffer(count * stride));\n                MeshoptDecoder.decodeGltfBuffer(result, count, stride, source, extension.mode, extension.filter);\n                return Promise.resolve(result);\n            });\n\n            return bufferViewMeshopt._meshOptData;\n        });\n    }\n}\n\nGLTFLoader.RegisterExtension(NAME, (loader) => new EXT_meshopt_compression(loader));\n"]}